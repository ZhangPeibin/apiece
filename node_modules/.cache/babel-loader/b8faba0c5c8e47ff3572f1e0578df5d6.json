{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n}); // Number.MAX_SAFE_INTEGER\n\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\nfunction checkUInt53(n) {\n  if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0) throw new RangeError('value out of range');\n}\n\nfunction encode(_number, buffer, offset) {\n  checkUInt53(_number);\n  if (!buffer) buffer = Buffer.allocUnsafe(encodingLength(_number));\n  if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance');\n  if (!offset) offset = 0; // 8 bit\n\n  if (_number < 0xfd) {\n    buffer.writeUInt8(_number, offset);\n    Object.assign(encode, {\n      bytes: 1\n    }); // 16 bit\n  } else if (_number <= 0xffff) {\n    buffer.writeUInt8(0xfd, offset);\n    buffer.writeUInt16LE(_number, offset + 1);\n    Object.assign(encode, {\n      bytes: 3\n    }); // 32 bit\n  } else if (_number <= 0xffffffff) {\n    buffer.writeUInt8(0xfe, offset);\n    buffer.writeUInt32LE(_number, offset + 1);\n    Object.assign(encode, {\n      bytes: 5\n    }); // 64 bit\n  } else {\n    buffer.writeUInt8(0xff, offset);\n    buffer.writeUInt32LE(_number >>> 0, offset + 1);\n    buffer.writeUInt32LE(_number / 0x100000000 | 0, offset + 5);\n    Object.assign(encode, {\n      bytes: 9\n    });\n  }\n\n  return buffer;\n}\n\nexports.encode = encode;\n\nfunction decode(buffer, offset) {\n  if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance');\n  if (!offset) offset = 0;\n  const first = buffer.readUInt8(offset); // 8 bit\n\n  if (first < 0xfd) {\n    Object.assign(decode, {\n      bytes: 1\n    });\n    return first; // 16 bit\n  } else if (first === 0xfd) {\n    Object.assign(decode, {\n      bytes: 3\n    });\n    return buffer.readUInt16LE(offset + 1); // 32 bit\n  } else if (first === 0xfe) {\n    Object.assign(decode, {\n      bytes: 5\n    });\n    return buffer.readUInt32LE(offset + 1); // 64 bit\n  } else {\n    Object.assign(decode, {\n      bytes: 9\n    });\n    const lo = buffer.readUInt32LE(offset + 1);\n    const hi = buffer.readUInt32LE(offset + 5);\n\n    const _number = hi * 0x0100000000 + lo;\n\n    checkUInt53(_number);\n    return _number;\n  }\n}\n\nexports.decode = decode;\n\nfunction encodingLength(_number) {\n  checkUInt53(_number);\n  return _number < 0xfd ? 1 : _number <= 0xffff ? 3 : _number <= 0xffffffff ? 5 : 9;\n}\n\nexports.encodingLength = encodingLength;","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/node_modules/bip174/src/lib/converter/varint.js"],"names":["Object","defineProperty","exports","value","MAX_SAFE_INTEGER","checkUInt53","n","RangeError","encode","_number","buffer","offset","Buffer","allocUnsafe","encodingLength","isBuffer","TypeError","writeUInt8","assign","bytes","writeUInt16LE","writeUInt32LE","decode","first","readUInt8","readUInt16LE","readUInt32LE","lo","hi"],"mappings":"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","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\n// Number.MAX_SAFE_INTEGER\nconst MAX_SAFE_INTEGER = 9007199254740991;\nfunction checkUInt53(n) {\n  if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0)\n    throw new RangeError('value out of range');\n}\nfunction encode(_number, buffer, offset) {\n  checkUInt53(_number);\n  if (!buffer) buffer = Buffer.allocUnsafe(encodingLength(_number));\n  if (!Buffer.isBuffer(buffer))\n    throw new TypeError('buffer must be a Buffer instance');\n  if (!offset) offset = 0;\n  // 8 bit\n  if (_number < 0xfd) {\n    buffer.writeUInt8(_number, offset);\n    Object.assign(encode, { bytes: 1 });\n    // 16 bit\n  } else if (_number <= 0xffff) {\n    buffer.writeUInt8(0xfd, offset);\n    buffer.writeUInt16LE(_number, offset + 1);\n    Object.assign(encode, { bytes: 3 });\n    // 32 bit\n  } else if (_number <= 0xffffffff) {\n    buffer.writeUInt8(0xfe, offset);\n    buffer.writeUInt32LE(_number, offset + 1);\n    Object.assign(encode, { bytes: 5 });\n    // 64 bit\n  } else {\n    buffer.writeUInt8(0xff, offset);\n    buffer.writeUInt32LE(_number >>> 0, offset + 1);\n    buffer.writeUInt32LE((_number / 0x100000000) | 0, offset + 5);\n    Object.assign(encode, { bytes: 9 });\n  }\n  return buffer;\n}\nexports.encode = encode;\nfunction decode(buffer, offset) {\n  if (!Buffer.isBuffer(buffer))\n    throw new TypeError('buffer must be a Buffer instance');\n  if (!offset) offset = 0;\n  const first = buffer.readUInt8(offset);\n  // 8 bit\n  if (first < 0xfd) {\n    Object.assign(decode, { bytes: 1 });\n    return first;\n    // 16 bit\n  } else if (first === 0xfd) {\n    Object.assign(decode, { bytes: 3 });\n    return buffer.readUInt16LE(offset + 1);\n    // 32 bit\n  } else if (first === 0xfe) {\n    Object.assign(decode, { bytes: 5 });\n    return buffer.readUInt32LE(offset + 1);\n    // 64 bit\n  } else {\n    Object.assign(decode, { bytes: 9 });\n    const lo = buffer.readUInt32LE(offset + 1);\n    const hi = buffer.readUInt32LE(offset + 5);\n    const _number = hi * 0x0100000000 + lo;\n    checkUInt53(_number);\n    return _number;\n  }\n}\nexports.decode = decode;\nfunction encodingLength(_number) {\n  checkUInt53(_number);\n  return _number < 0xfd\n    ? 1\n    : _number <= 0xffff\n    ? 3\n    : _number <= 0xffffffff\n    ? 5\n    : 9;\n}\nexports.encodingLength = encodingLength;\n"]},"metadata":{},"sourceType":"script"}