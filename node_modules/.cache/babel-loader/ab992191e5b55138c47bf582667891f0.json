{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst networks_1 = require('../networks');\n\nconst bscript = require('../script');\n\nconst lazy = require('./lazy');\n\nconst typef = require('typeforce');\n\nconst OPS = bscript.OPS;\n\nconst ecc = require('tiny-secp256k1'); // input: {signature}\n// output: {pubKey} OP_CHECKSIG\n\n\nfunction p2pk(a, opts) {\n  if (!a.input && !a.output && !a.pubkey && !a.input && !a.signature) throw new TypeError('Not enough data');\n  opts = Object.assign({\n    validate: true\n  }, opts || {});\n  typef({\n    network: typef.maybe(typef.Object),\n    output: typef.maybe(typef.Buffer),\n    pubkey: typef.maybe(ecc.isPoint),\n    signature: typef.maybe(bscript.isCanonicalScriptSignature),\n    input: typef.maybe(typef.Buffer)\n  }, a);\n\n  const _chunks = lazy.value(() => {\n    return bscript.decompile(a.input);\n  });\n\n  const network = a.network || networks_1.bitcoin;\n  const o = {\n    name: 'p2pk',\n    network\n  };\n  lazy.prop(o, 'output', () => {\n    if (!a.pubkey) return;\n    return bscript.compile([a.pubkey, OPS.OP_CHECKSIG]);\n  });\n  lazy.prop(o, 'pubkey', () => {\n    if (!a.output) return;\n    return a.output.slice(1, -1);\n  });\n  lazy.prop(o, 'signature', () => {\n    if (!a.input) return;\n    return _chunks()[0];\n  });\n  lazy.prop(o, 'input', () => {\n    if (!a.signature) return;\n    return bscript.compile([a.signature]);\n  });\n  lazy.prop(o, 'witness', () => {\n    if (!o.input) return;\n    return [];\n  }); // extended validation\n\n  if (opts.validate) {\n    if (a.output) {\n      if (a.output[a.output.length - 1] !== OPS.OP_CHECKSIG) throw new TypeError('Output is invalid');\n      if (!ecc.isPoint(o.pubkey)) throw new TypeError('Output pubkey is invalid');\n      if (a.pubkey && !a.pubkey.equals(o.pubkey)) throw new TypeError('Pubkey mismatch');\n    }\n\n    if (a.signature) {\n      if (a.input && !a.input.equals(o.input)) throw new TypeError('Signature mismatch');\n    }\n\n    if (a.input) {\n      if (_chunks().length !== 1) throw new TypeError('Input is invalid');\n      if (!bscript.isCanonicalScriptSignature(o.signature)) throw new TypeError('Input has invalid signature');\n    }\n  }\n\n  return Object.assign(o, a);\n}\n\nexports.p2pk = p2pk;","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/node_modules/bitcoinjs-lib/src/payments/p2pk.js"],"names":["Object","defineProperty","exports","value","networks_1","require","bscript","lazy","typef","OPS","ecc","p2pk","a","opts","input","output","pubkey","signature","TypeError","assign","validate","network","maybe","Buffer","isPoint","isCanonicalScriptSignature","_chunks","decompile","bitcoin","o","name","prop","compile","OP_CHECKSIG","slice","length","equals"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,WAAD,CAArB;;AACA,MAAMI,GAAG,GAAGH,OAAO,CAACG,GAApB;;AACA,MAAMC,GAAG,GAAGL,OAAO,CAAC,gBAAD,CAAnB,C,CACA;AACA;;;AACA,SAASM,IAAT,CAAcC,CAAd,EAAiBC,IAAjB,EAAuB;AACrB,MAAI,CAACD,CAAC,CAACE,KAAH,IAAY,CAACF,CAAC,CAACG,MAAf,IAAyB,CAACH,CAAC,CAACI,MAA5B,IAAsC,CAACJ,CAAC,CAACE,KAAzC,IAAkD,CAACF,CAAC,CAACK,SAAzD,EACE,MAAM,IAAIC,SAAJ,CAAc,iBAAd,CAAN;AACFL,EAAAA,IAAI,GAAGb,MAAM,CAACmB,MAAP,CAAc;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAd,EAAkCP,IAAI,IAAI,EAA1C,CAAP;AACAL,EAAAA,KAAK,CACH;AACEa,IAAAA,OAAO,EAAEb,KAAK,CAACc,KAAN,CAAYd,KAAK,CAACR,MAAlB,CADX;AAEEe,IAAAA,MAAM,EAAEP,KAAK,CAACc,KAAN,CAAYd,KAAK,CAACe,MAAlB,CAFV;AAGEP,IAAAA,MAAM,EAAER,KAAK,CAACc,KAAN,CAAYZ,GAAG,CAACc,OAAhB,CAHV;AAIEP,IAAAA,SAAS,EAAET,KAAK,CAACc,KAAN,CAAYhB,OAAO,CAACmB,0BAApB,CAJb;AAKEX,IAAAA,KAAK,EAAEN,KAAK,CAACc,KAAN,CAAYd,KAAK,CAACe,MAAlB;AALT,GADG,EAQHX,CARG,CAAL;;AAUA,QAAMc,OAAO,GAAGnB,IAAI,CAACJ,KAAL,CAAW,MAAM;AAC/B,WAAOG,OAAO,CAACqB,SAAR,CAAkBf,CAAC,CAACE,KAApB,CAAP;AACD,GAFe,CAAhB;;AAGA,QAAMO,OAAO,GAAGT,CAAC,CAACS,OAAF,IAAajB,UAAU,CAACwB,OAAxC;AACA,QAAMC,CAAC,GAAG;AAAEC,IAAAA,IAAI,EAAE,MAAR;AAAgBT,IAAAA;AAAhB,GAAV;AACAd,EAAAA,IAAI,CAACwB,IAAL,CAAUF,CAAV,EAAa,QAAb,EAAuB,MAAM;AAC3B,QAAI,CAACjB,CAAC,CAACI,MAAP,EAAe;AACf,WAAOV,OAAO,CAAC0B,OAAR,CAAgB,CAACpB,CAAC,CAACI,MAAH,EAAWP,GAAG,CAACwB,WAAf,CAAhB,CAAP;AACD,GAHD;AAIA1B,EAAAA,IAAI,CAACwB,IAAL,CAAUF,CAAV,EAAa,QAAb,EAAuB,MAAM;AAC3B,QAAI,CAACjB,CAAC,CAACG,MAAP,EAAe;AACf,WAAOH,CAAC,CAACG,MAAF,CAASmB,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAP;AACD,GAHD;AAIA3B,EAAAA,IAAI,CAACwB,IAAL,CAAUF,CAAV,EAAa,WAAb,EAA0B,MAAM;AAC9B,QAAI,CAACjB,CAAC,CAACE,KAAP,EAAc;AACd,WAAOY,OAAO,GAAG,CAAH,CAAd;AACD,GAHD;AAIAnB,EAAAA,IAAI,CAACwB,IAAL,CAAUF,CAAV,EAAa,OAAb,EAAsB,MAAM;AAC1B,QAAI,CAACjB,CAAC,CAACK,SAAP,EAAkB;AAClB,WAAOX,OAAO,CAAC0B,OAAR,CAAgB,CAACpB,CAAC,CAACK,SAAH,CAAhB,CAAP;AACD,GAHD;AAIAV,EAAAA,IAAI,CAACwB,IAAL,CAAUF,CAAV,EAAa,SAAb,EAAwB,MAAM;AAC5B,QAAI,CAACA,CAAC,CAACf,KAAP,EAAc;AACd,WAAO,EAAP;AACD,GAHD,EAnCqB,CAuCrB;;AACA,MAAID,IAAI,CAACO,QAAT,EAAmB;AACjB,QAAIR,CAAC,CAACG,MAAN,EAAc;AACZ,UAAIH,CAAC,CAACG,MAAF,CAASH,CAAC,CAACG,MAAF,CAASoB,MAAT,GAAkB,CAA3B,MAAkC1B,GAAG,CAACwB,WAA1C,EACE,MAAM,IAAIf,SAAJ,CAAc,mBAAd,CAAN;AACF,UAAI,CAACR,GAAG,CAACc,OAAJ,CAAYK,CAAC,CAACb,MAAd,CAAL,EACE,MAAM,IAAIE,SAAJ,CAAc,0BAAd,CAAN;AACF,UAAIN,CAAC,CAACI,MAAF,IAAY,CAACJ,CAAC,CAACI,MAAF,CAASoB,MAAT,CAAgBP,CAAC,CAACb,MAAlB,CAAjB,EACE,MAAM,IAAIE,SAAJ,CAAc,iBAAd,CAAN;AACH;;AACD,QAAIN,CAAC,CAACK,SAAN,EAAiB;AACf,UAAIL,CAAC,CAACE,KAAF,IAAW,CAACF,CAAC,CAACE,KAAF,CAAQsB,MAAR,CAAeP,CAAC,CAACf,KAAjB,CAAhB,EACE,MAAM,IAAII,SAAJ,CAAc,oBAAd,CAAN;AACH;;AACD,QAAIN,CAAC,CAACE,KAAN,EAAa;AACX,UAAIY,OAAO,GAAGS,MAAV,KAAqB,CAAzB,EAA4B,MAAM,IAAIjB,SAAJ,CAAc,kBAAd,CAAN;AAC5B,UAAI,CAACZ,OAAO,CAACmB,0BAAR,CAAmCI,CAAC,CAACZ,SAArC,CAAL,EACE,MAAM,IAAIC,SAAJ,CAAc,6BAAd,CAAN;AACH;AACF;;AACD,SAAOlB,MAAM,CAACmB,MAAP,CAAcU,CAAd,EAAiBjB,CAAjB,CAAP;AACD;;AACDV,OAAO,CAACS,IAAR,GAAeA,IAAf","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst networks_1 = require('../networks');\nconst bscript = require('../script');\nconst lazy = require('./lazy');\nconst typef = require('typeforce');\nconst OPS = bscript.OPS;\nconst ecc = require('tiny-secp256k1');\n// input: {signature}\n// output: {pubKey} OP_CHECKSIG\nfunction p2pk(a, opts) {\n  if (!a.input && !a.output && !a.pubkey && !a.input && !a.signature)\n    throw new TypeError('Not enough data');\n  opts = Object.assign({ validate: true }, opts || {});\n  typef(\n    {\n      network: typef.maybe(typef.Object),\n      output: typef.maybe(typef.Buffer),\n      pubkey: typef.maybe(ecc.isPoint),\n      signature: typef.maybe(bscript.isCanonicalScriptSignature),\n      input: typef.maybe(typef.Buffer),\n    },\n    a,\n  );\n  const _chunks = lazy.value(() => {\n    return bscript.decompile(a.input);\n  });\n  const network = a.network || networks_1.bitcoin;\n  const o = { name: 'p2pk', network };\n  lazy.prop(o, 'output', () => {\n    if (!a.pubkey) return;\n    return bscript.compile([a.pubkey, OPS.OP_CHECKSIG]);\n  });\n  lazy.prop(o, 'pubkey', () => {\n    if (!a.output) return;\n    return a.output.slice(1, -1);\n  });\n  lazy.prop(o, 'signature', () => {\n    if (!a.input) return;\n    return _chunks()[0];\n  });\n  lazy.prop(o, 'input', () => {\n    if (!a.signature) return;\n    return bscript.compile([a.signature]);\n  });\n  lazy.prop(o, 'witness', () => {\n    if (!o.input) return;\n    return [];\n  });\n  // extended validation\n  if (opts.validate) {\n    if (a.output) {\n      if (a.output[a.output.length - 1] !== OPS.OP_CHECKSIG)\n        throw new TypeError('Output is invalid');\n      if (!ecc.isPoint(o.pubkey))\n        throw new TypeError('Output pubkey is invalid');\n      if (a.pubkey && !a.pubkey.equals(o.pubkey))\n        throw new TypeError('Pubkey mismatch');\n    }\n    if (a.signature) {\n      if (a.input && !a.input.equals(o.input))\n        throw new TypeError('Signature mismatch');\n    }\n    if (a.input) {\n      if (_chunks().length !== 1) throw new TypeError('Input is invalid');\n      if (!bscript.isCanonicalScriptSignature(o.signature))\n        throw new TypeError('Input has invalid signature');\n    }\n  }\n  return Object.assign(o, a);\n}\nexports.p2pk = p2pk;\n"]},"metadata":{},"sourceType":"script"}