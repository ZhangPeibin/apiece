{"ast":null,"code":"'use strict'; // OP_RETURN {aa21a9ed} {commitment}\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst bscript = require('../../script');\n\nconst script_1 = require('../../script');\n\nconst types = require('../../types');\n\nconst typeforce = require('typeforce');\n\nconst HEADER = Buffer.from('aa21a9ed', 'hex');\n\nfunction check(script) {\n  const buffer = bscript.compile(script);\n  return buffer.length > 37 && buffer[0] === script_1.OPS.OP_RETURN && buffer[1] === 0x24 && buffer.slice(2, 6).equals(HEADER);\n}\n\nexports.check = check;\n\ncheck.toJSON = () => {\n  return 'Witness commitment output';\n};\n\nfunction encode(commitment) {\n  typeforce(types.Hash256bit, commitment);\n  const buffer = Buffer.allocUnsafe(36);\n  HEADER.copy(buffer, 0);\n  commitment.copy(buffer, 4);\n  return bscript.compile([script_1.OPS.OP_RETURN, buffer]);\n}\n\nexports.encode = encode;\n\nfunction decode(buffer) {\n  typeforce(check, buffer);\n  return bscript.decompile(buffer)[1].slice(4, 36);\n}\n\nexports.decode = decode;","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/node_modules/bitcoinjs-lib/src/templates/witnesscommitment/output.js"],"names":["Object","defineProperty","exports","value","bscript","require","script_1","types","typeforce","HEADER","Buffer","from","check","script","buffer","compile","length","OPS","OP_RETURN","slice","equals","toJSON","encode","commitment","Hash256bit","allocUnsafe","copy","decode","decompile"],"mappings":"AAAA,a,CACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,cAAD,CAAxB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMI,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAY,UAAZ,EAAwB,KAAxB,CAAf;;AACA,SAASC,KAAT,CAAeC,MAAf,EAAuB;AACrB,QAAMC,MAAM,GAAGV,OAAO,CAACW,OAAR,CAAgBF,MAAhB,CAAf;AACA,SACEC,MAAM,CAACE,MAAP,GAAgB,EAAhB,IACAF,MAAM,CAAC,CAAD,CAAN,KAAcR,QAAQ,CAACW,GAAT,CAAaC,SAD3B,IAEAJ,MAAM,CAAC,CAAD,CAAN,KAAc,IAFd,IAGAA,MAAM,CAACK,KAAP,CAAa,CAAb,EAAgB,CAAhB,EAAmBC,MAAnB,CAA0BX,MAA1B,CAJF;AAMD;;AACDP,OAAO,CAACU,KAAR,GAAgBA,KAAhB;;AACAA,KAAK,CAACS,MAAN,GAAe,MAAM;AACnB,SAAO,2BAAP;AACD,CAFD;;AAGA,SAASC,MAAT,CAAgBC,UAAhB,EAA4B;AAC1Bf,EAAAA,SAAS,CAACD,KAAK,CAACiB,UAAP,EAAmBD,UAAnB,CAAT;AACA,QAAMT,MAAM,GAAGJ,MAAM,CAACe,WAAP,CAAmB,EAAnB,CAAf;AACAhB,EAAAA,MAAM,CAACiB,IAAP,CAAYZ,MAAZ,EAAoB,CAApB;AACAS,EAAAA,UAAU,CAACG,IAAX,CAAgBZ,MAAhB,EAAwB,CAAxB;AACA,SAAOV,OAAO,CAACW,OAAR,CAAgB,CAACT,QAAQ,CAACW,GAAT,CAAaC,SAAd,EAAyBJ,MAAzB,CAAhB,CAAP;AACD;;AACDZ,OAAO,CAACoB,MAAR,GAAiBA,MAAjB;;AACA,SAASK,MAAT,CAAgBb,MAAhB,EAAwB;AACtBN,EAAAA,SAAS,CAACI,KAAD,EAAQE,MAAR,CAAT;AACA,SAAOV,OAAO,CAACwB,SAAR,CAAkBd,MAAlB,EAA0B,CAA1B,EAA6BK,KAA7B,CAAmC,CAAnC,EAAsC,EAAtC,CAAP;AACD;;AACDjB,OAAO,CAACyB,MAAR,GAAiBA,MAAjB","sourcesContent":["'use strict';\n// OP_RETURN {aa21a9ed} {commitment}\nObject.defineProperty(exports, '__esModule', { value: true });\nconst bscript = require('../../script');\nconst script_1 = require('../../script');\nconst types = require('../../types');\nconst typeforce = require('typeforce');\nconst HEADER = Buffer.from('aa21a9ed', 'hex');\nfunction check(script) {\n  const buffer = bscript.compile(script);\n  return (\n    buffer.length > 37 &&\n    buffer[0] === script_1.OPS.OP_RETURN &&\n    buffer[1] === 0x24 &&\n    buffer.slice(2, 6).equals(HEADER)\n  );\n}\nexports.check = check;\ncheck.toJSON = () => {\n  return 'Witness commitment output';\n};\nfunction encode(commitment) {\n  typeforce(types.Hash256bit, commitment);\n  const buffer = Buffer.allocUnsafe(36);\n  HEADER.copy(buffer, 0);\n  commitment.copy(buffer, 4);\n  return bscript.compile([script_1.OPS.OP_RETURN, buffer]);\n}\nexports.encode = encode;\nfunction decode(buffer) {\n  typeforce(check, buffer);\n  return bscript.decompile(buffer)[1].slice(4, 36);\n}\nexports.decode = decode;\n"]},"metadata":{},"sourceType":"script"}