{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst typeFields_1 = require('../typeFields');\n\nconst globalXpub = require('./global/globalXpub');\n\nconst unsignedTx = require('./global/unsignedTx');\n\nconst finalScriptSig = require('./input/finalScriptSig');\n\nconst finalScriptWitness = require('./input/finalScriptWitness');\n\nconst nonWitnessUtxo = require('./input/nonWitnessUtxo');\n\nconst partialSig = require('./input/partialSig');\n\nconst porCommitment = require('./input/porCommitment');\n\nconst sighashType = require('./input/sighashType');\n\nconst witnessUtxo = require('./input/witnessUtxo');\n\nconst bip32Derivation = require('./shared/bip32Derivation');\n\nconst checkPubkey = require('./shared/checkPubkey');\n\nconst redeemScript = require('./shared/redeemScript');\n\nconst witnessScript = require('./shared/witnessScript');\n\nconst globals = {\n  unsignedTx,\n  globalXpub,\n  // pass an Array of key bytes that require pubkey beside the key\n  checkPubkey: checkPubkey.makeChecker([])\n};\nexports.globals = globals;\nconst inputs = {\n  nonWitnessUtxo,\n  partialSig,\n  sighashType,\n  finalScriptSig,\n  finalScriptWitness,\n  porCommitment,\n  witnessUtxo,\n  bip32Derivation: bip32Derivation.makeConverter(typeFields_1.InputTypes.BIP32_DERIVATION),\n  redeemScript: redeemScript.makeConverter(typeFields_1.InputTypes.REDEEM_SCRIPT),\n  witnessScript: witnessScript.makeConverter(typeFields_1.InputTypes.WITNESS_SCRIPT),\n  checkPubkey: checkPubkey.makeChecker([typeFields_1.InputTypes.PARTIAL_SIG, typeFields_1.InputTypes.BIP32_DERIVATION])\n};\nexports.inputs = inputs;\nconst outputs = {\n  bip32Derivation: bip32Derivation.makeConverter(typeFields_1.OutputTypes.BIP32_DERIVATION),\n  redeemScript: redeemScript.makeConverter(typeFields_1.OutputTypes.REDEEM_SCRIPT),\n  witnessScript: witnessScript.makeConverter(typeFields_1.OutputTypes.WITNESS_SCRIPT),\n  checkPubkey: checkPubkey.makeChecker([typeFields_1.OutputTypes.BIP32_DERIVATION])\n};\nexports.outputs = outputs;","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/node_modules/bip174/src/lib/converter/index.js"],"names":["Object","defineProperty","exports","value","typeFields_1","require","globalXpub","unsignedTx","finalScriptSig","finalScriptWitness","nonWitnessUtxo","partialSig","porCommitment","sighashType","witnessUtxo","bip32Derivation","checkPubkey","redeemScript","witnessScript","globals","makeChecker","inputs","makeConverter","InputTypes","BIP32_DERIVATION","REDEEM_SCRIPT","WITNESS_SCRIPT","PARTIAL_SIG","outputs","OutputTypes"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,qBAAD,CAA1B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,qBAAD,CAA1B;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,wBAAD,CAA9B;;AACA,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,4BAAD,CAAlC;;AACA,MAAMK,cAAc,GAAGL,OAAO,CAAC,wBAAD,CAA9B;;AACA,MAAMM,UAAU,GAAGN,OAAO,CAAC,oBAAD,CAA1B;;AACA,MAAMO,aAAa,GAAGP,OAAO,CAAC,uBAAD,CAA7B;;AACA,MAAMQ,WAAW,GAAGR,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAMS,WAAW,GAAGT,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAMU,eAAe,GAAGV,OAAO,CAAC,0BAAD,CAA/B;;AACA,MAAMW,WAAW,GAAGX,OAAO,CAAC,sBAAD,CAA3B;;AACA,MAAMY,YAAY,GAAGZ,OAAO,CAAC,uBAAD,CAA5B;;AACA,MAAMa,aAAa,GAAGb,OAAO,CAAC,wBAAD,CAA7B;;AACA,MAAMc,OAAO,GAAG;AACdZ,EAAAA,UADc;AAEdD,EAAAA,UAFc;AAGd;AACAU,EAAAA,WAAW,EAAEA,WAAW,CAACI,WAAZ,CAAwB,EAAxB;AAJC,CAAhB;AAMAlB,OAAO,CAACiB,OAAR,GAAkBA,OAAlB;AACA,MAAME,MAAM,GAAG;AACbX,EAAAA,cADa;AAEbC,EAAAA,UAFa;AAGbE,EAAAA,WAHa;AAIbL,EAAAA,cAJa;AAKbC,EAAAA,kBALa;AAMbG,EAAAA,aANa;AAObE,EAAAA,WAPa;AAQbC,EAAAA,eAAe,EAAEA,eAAe,CAACO,aAAhB,CACflB,YAAY,CAACmB,UAAb,CAAwBC,gBADT,CARJ;AAWbP,EAAAA,YAAY,EAAEA,YAAY,CAACK,aAAb,CACZlB,YAAY,CAACmB,UAAb,CAAwBE,aADZ,CAXD;AAcbP,EAAAA,aAAa,EAAEA,aAAa,CAACI,aAAd,CACblB,YAAY,CAACmB,UAAb,CAAwBG,cADX,CAdF;AAiBbV,EAAAA,WAAW,EAAEA,WAAW,CAACI,WAAZ,CAAwB,CACnChB,YAAY,CAACmB,UAAb,CAAwBI,WADW,EAEnCvB,YAAY,CAACmB,UAAb,CAAwBC,gBAFW,CAAxB;AAjBA,CAAf;AAsBAtB,OAAO,CAACmB,MAAR,GAAiBA,MAAjB;AACA,MAAMO,OAAO,GAAG;AACdb,EAAAA,eAAe,EAAEA,eAAe,CAACO,aAAhB,CACflB,YAAY,CAACyB,WAAb,CAAyBL,gBADV,CADH;AAIdP,EAAAA,YAAY,EAAEA,YAAY,CAACK,aAAb,CACZlB,YAAY,CAACyB,WAAb,CAAyBJ,aADb,CAJA;AAOdP,EAAAA,aAAa,EAAEA,aAAa,CAACI,aAAd,CACblB,YAAY,CAACyB,WAAb,CAAyBH,cADZ,CAPD;AAUdV,EAAAA,WAAW,EAAEA,WAAW,CAACI,WAAZ,CAAwB,CACnChB,YAAY,CAACyB,WAAb,CAAyBL,gBADU,CAAxB;AAVC,CAAhB;AAcAtB,OAAO,CAAC0B,OAAR,GAAkBA,OAAlB","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst typeFields_1 = require('../typeFields');\nconst globalXpub = require('./global/globalXpub');\nconst unsignedTx = require('./global/unsignedTx');\nconst finalScriptSig = require('./input/finalScriptSig');\nconst finalScriptWitness = require('./input/finalScriptWitness');\nconst nonWitnessUtxo = require('./input/nonWitnessUtxo');\nconst partialSig = require('./input/partialSig');\nconst porCommitment = require('./input/porCommitment');\nconst sighashType = require('./input/sighashType');\nconst witnessUtxo = require('./input/witnessUtxo');\nconst bip32Derivation = require('./shared/bip32Derivation');\nconst checkPubkey = require('./shared/checkPubkey');\nconst redeemScript = require('./shared/redeemScript');\nconst witnessScript = require('./shared/witnessScript');\nconst globals = {\n  unsignedTx,\n  globalXpub,\n  // pass an Array of key bytes that require pubkey beside the key\n  checkPubkey: checkPubkey.makeChecker([]),\n};\nexports.globals = globals;\nconst inputs = {\n  nonWitnessUtxo,\n  partialSig,\n  sighashType,\n  finalScriptSig,\n  finalScriptWitness,\n  porCommitment,\n  witnessUtxo,\n  bip32Derivation: bip32Derivation.makeConverter(\n    typeFields_1.InputTypes.BIP32_DERIVATION,\n  ),\n  redeemScript: redeemScript.makeConverter(\n    typeFields_1.InputTypes.REDEEM_SCRIPT,\n  ),\n  witnessScript: witnessScript.makeConverter(\n    typeFields_1.InputTypes.WITNESS_SCRIPT,\n  ),\n  checkPubkey: checkPubkey.makeChecker([\n    typeFields_1.InputTypes.PARTIAL_SIG,\n    typeFields_1.InputTypes.BIP32_DERIVATION,\n  ]),\n};\nexports.inputs = inputs;\nconst outputs = {\n  bip32Derivation: bip32Derivation.makeConverter(\n    typeFields_1.OutputTypes.BIP32_DERIVATION,\n  ),\n  redeemScript: redeemScript.makeConverter(\n    typeFields_1.OutputTypes.REDEEM_SCRIPT,\n  ),\n  witnessScript: witnessScript.makeConverter(\n    typeFields_1.OutputTypes.WITNESS_SCRIPT,\n  ),\n  checkPubkey: checkPubkey.makeChecker([\n    typeFields_1.OutputTypes.BIP32_DERIVATION,\n  ]),\n};\nexports.outputs = outputs;\n"]},"metadata":{},"sourceType":"script"}