{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst typeFields_1 = require('../../typeFields');\n\nfunction decode(keyVal) {\n  if (keyVal.key[0] !== typeFields_1.InputTypes.FINAL_SCRIPTWITNESS) {\n    throw new Error('Decode Error: could not decode finalScriptWitness with key 0x' + keyVal.key.toString('hex'));\n  }\n\n  return keyVal.value;\n}\n\nexports.decode = decode;\n\nfunction encode(data) {\n  const key = Buffer.from([typeFields_1.InputTypes.FINAL_SCRIPTWITNESS]);\n  return {\n    key,\n    value: data\n  };\n}\n\nexports.encode = encode;\nexports.expected = 'Buffer';\n\nfunction check(data) {\n  return Buffer.isBuffer(data);\n}\n\nexports.check = check;\n\nfunction canAdd(currentData, newData) {\n  return !!currentData && !!newData && currentData.finalScriptWitness === undefined;\n}\n\nexports.canAdd = canAdd;","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/node_modules/bip174/src/lib/converter/input/finalScriptWitness.js"],"names":["Object","defineProperty","exports","value","typeFields_1","require","decode","keyVal","key","InputTypes","FINAL_SCRIPTWITNESS","Error","toString","encode","data","Buffer","from","expected","check","isBuffer","canAdd","currentData","newData","finalScriptWitness","undefined"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,YAAY,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AACA,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACtB,MAAIA,MAAM,CAACC,GAAP,CAAW,CAAX,MAAkBJ,YAAY,CAACK,UAAb,CAAwBC,mBAA9C,EAAmE;AACjE,UAAM,IAAIC,KAAJ,CACJ,kEACEJ,MAAM,CAACC,GAAP,CAAWI,QAAX,CAAoB,KAApB,CAFE,CAAN;AAID;;AACD,SAAOL,MAAM,CAACJ,KAAd;AACD;;AACDD,OAAO,CAACI,MAAR,GAAiBA,MAAjB;;AACA,SAASO,MAAT,CAAgBC,IAAhB,EAAsB;AACpB,QAAMN,GAAG,GAAGO,MAAM,CAACC,IAAP,CAAY,CAACZ,YAAY,CAACK,UAAb,CAAwBC,mBAAzB,CAAZ,CAAZ;AACA,SAAO;AACLF,IAAAA,GADK;AAELL,IAAAA,KAAK,EAAEW;AAFF,GAAP;AAID;;AACDZ,OAAO,CAACW,MAAR,GAAiBA,MAAjB;AACAX,OAAO,CAACe,QAAR,GAAmB,QAAnB;;AACA,SAASC,KAAT,CAAeJ,IAAf,EAAqB;AACnB,SAAOC,MAAM,CAACI,QAAP,CAAgBL,IAAhB,CAAP;AACD;;AACDZ,OAAO,CAACgB,KAAR,GAAgBA,KAAhB;;AACA,SAASE,MAAT,CAAgBC,WAAhB,EAA6BC,OAA7B,EAAsC;AACpC,SACE,CAAC,CAACD,WAAF,IAAiB,CAAC,CAACC,OAAnB,IAA8BD,WAAW,CAACE,kBAAZ,KAAmCC,SADnE;AAGD;;AACDtB,OAAO,CAACkB,MAAR,GAAiBA,MAAjB","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst typeFields_1 = require('../../typeFields');\nfunction decode(keyVal) {\n  if (keyVal.key[0] !== typeFields_1.InputTypes.FINAL_SCRIPTWITNESS) {\n    throw new Error(\n      'Decode Error: could not decode finalScriptWitness with key 0x' +\n        keyVal.key.toString('hex'),\n    );\n  }\n  return keyVal.value;\n}\nexports.decode = decode;\nfunction encode(data) {\n  const key = Buffer.from([typeFields_1.InputTypes.FINAL_SCRIPTWITNESS]);\n  return {\n    key,\n    value: data,\n  };\n}\nexports.encode = encode;\nexports.expected = 'Buffer';\nfunction check(data) {\n  return Buffer.isBuffer(data);\n}\nexports.check = check;\nfunction canAdd(currentData, newData) {\n  return (\n    !!currentData && !!newData && currentData.finalScriptWitness === undefined\n  );\n}\nexports.canAdd = canAdd;\n"]},"metadata":{},"sourceType":"script"}