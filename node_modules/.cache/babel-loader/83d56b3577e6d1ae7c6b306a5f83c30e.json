{"ast":null,"code":"var _jsxFileName = \"/Users/wiki/code/filecoin/private.storage/src/views/dashborad/Dashboard.js\";\nimport * as React from \"react\";\nimport './Dashboard.css';\nimport { getLocalUserIdentity } from \"../../common/user\";\nimport { getBucketKey } from \"../../common/bucket\";\nimport CustomizedDropZone from \"../../components/CustomizedDropZone/CustomizedDropZone\";\nimport { getFileIndex, storeIndex } from \"../../common/FileIndex\";\nimport FileZone from \"../../components/FileZone/FileZone\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class DashboardPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fileSelectCallback = data => {\n      this.setState({\n        checked: data\n      });\n    };\n\n    this.fileUploadCallback = async data => {\n      let dataAlreadyInPaths = false;\n      this.state.index.paths.forEach(function (element) {\n        if (element['cid'] === data['cid']) {\n          dataAlreadyInPaths = true;\n        }\n      });\n\n      if (!dataAlreadyInPaths) {\n        this.setState({\n          index: { ...this.state.index,\n            paths: [...this.state.index.paths, data],\n            counts: this.state.index.counts + 1\n          }\n        });\n        await storeIndex(this.state.index, this.state.buckets, this.state.bucketKey);\n      }\n    };\n\n    if (props.location.query != null) {\n      this.state = {\n        bucketKey: props.location.query.bucketKey,\n        buckets: props.location.query.buckets,\n        links: props.location.query.links\n      };\n    }\n  }\n\n  async componentWillMount() {\n    if (this.state == null || this.state.bucketKey == null || this.state.buckets == null) {\n      const userIdentity = await getLocalUserIdentity();\n\n      if (userIdentity != null) {\n        const {\n          bucketKey,\n          buckets\n        } = await getBucketKey(userIdentity);\n        this.setState({\n          bucketKey: bucketKey,\n          buckets: buckets\n        });\n      } else {\n        this.props.history.push({\n          pathname: \"/mnemonic\"\n        });\n      }\n    }\n\n    let loading = document.getElementById('loader');\n    loading.style.display = 'none';\n    const index = await getFileIndex(this.state.buckets, this.state.bucketKey);\n\n    if (index) {\n      this.setState({\n        index: index\n      });\n    }\n  }\n\n  render() {\n    if (this.state == null || this.state.buckets == null || this.state.bucketKey == null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (this.state.index == null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(CustomizedDropZone, {\n          bucketKey: this.state.bucketKey,\n          buckets: this.state.buckets,\n          callback: this.fileUploadCallback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(CustomizedDropZone, {\n          bucketKey: this.state.bucketKey,\n          buckets: this.state.buckets,\n          callback: this.fileUploadCallback,\n          checked: this.state.checked\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FileZone, {\n          index: this.state.index,\n          callback: this.fileSelectCallback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/src/views/dashborad/Dashboard.js"],"names":["React","getLocalUserIdentity","getBucketKey","CustomizedDropZone","getFileIndex","storeIndex","FileZone","DashboardPage","Component","constructor","props","fileSelectCallback","data","setState","checked","fileUploadCallback","dataAlreadyInPaths","state","index","paths","forEach","element","counts","buckets","bucketKey","location","query","links","componentWillMount","userIdentity","history","push","pathname","loading","document","getElementById","style","display","render"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport './Dashboard.css'\nimport {getLocalUserIdentity,} from \"../../common/user\";\nimport {getBucketKey} from \"../../common/bucket\";\nimport CustomizedDropZone from \"../../components/CustomizedDropZone/CustomizedDropZone\";\nimport {getFileIndex, storeIndex} from \"../../common/FileIndex\";\nimport FileZone from \"../../components/FileZone/FileZone\";\n\nexport class DashboardPage extends React.Component {\n    constructor(props) {\n        super(props);\n        if (props.location.query != null) {\n            this.state = {\n                bucketKey: props.location.query.bucketKey,\n                buckets: props.location.query.buckets,\n                links: props.location.query.links,\n            }\n        }\n    }\n\n    async componentWillMount() {\n        if (this.state == null || this.state.bucketKey == null || this.state.buckets == null) {\n            const userIdentity = await getLocalUserIdentity();\n            if (userIdentity != null) {\n                const {bucketKey, buckets} = await getBucketKey(userIdentity);\n                this.setState({\n                    bucketKey: bucketKey,\n                    buckets: buckets,\n                })\n            } else {\n                this.props.history.push({pathname: \"/mnemonic\"});\n            }\n        }\n        let loading = document.getElementById('loader');\n        loading.style.display = 'none';\n        const index = await getFileIndex(this.state.buckets, this.state.bucketKey);\n        if (index) {\n            this.setState({\n                index: index\n            })\n        }\n    }\n\n    render() {\n        if (this.state == null || this.state.buckets == null || this.state.bucketKey == null) {\n            return <div/>\n        }\n\n        if(this.state.index==null){\n            return (\n                <div>\n                    <CustomizedDropZone bucketKey={this.state.bucketKey}\n                                        buckets={this.state.buckets}\n                                        callback={this.fileUploadCallback}/>\n                </div>\n            )\n        }else{\n            return (\n                <div>\n                    <CustomizedDropZone bucketKey={this.state.bucketKey}\n                                        buckets={this.state.buckets}\n                                        callback={this.fileUploadCallback}\n                                        checked = {this.state.checked}/>\n                    <FileZone index={this.state.index} callback={this.fileSelectCallback}/>\n                </div>\n            );\n        }\n    }\n\n    fileSelectCallback = (data) =>{\n        this.setState({\n            checked:data\n        });\n    }\n\n    fileUploadCallback = async (data) => {\n        let dataAlreadyInPaths = false;\n        this.state.index.paths.forEach(function (element) {\n            if(element['cid'] === data['cid']){\n                dataAlreadyInPaths = true;\n            }\n        });\n        if(!dataAlreadyInPaths){\n            this.setState({\n                index: {\n                    ...this.state.index,\n                    paths: [...this.state.index.paths, data],\n                    counts: this.state.index.counts + 1\n                },\n            });\n            await storeIndex(this.state.index, this.state.buckets, this.state.bucketKey);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}