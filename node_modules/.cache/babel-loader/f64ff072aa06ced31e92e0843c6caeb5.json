{"ast":null,"code":"import { Buckets } from '@textile/hub';\nexport async function getBucketKey(userIdentity) {\n  if (!userIdentity) {\n    throw new Error('UserIdentity not set');\n  }\n\n  const buckets = await Buckets.withKeyInfo({\n    key: 'bbf34lt5akjatszwybsu5nfhdru'\n  }, {\n    debug: false\n  }); // Authorize the user and your insecure keys with getToken\n\n  await buckets.getToken(userIdentity);\n  const bucketZone = getCurrentBucketZone();\n  let buck = null;\n\n  if (bucketZone == null) {\n    buck = await buckets.getOrCreate('private.storage.zone');\n    setCurrentBucketZone('private.storage.zone');\n  } else {\n    buck = await buckets.getOrCreate(bucketZone);\n  }\n\n  if (!buck.root) {\n    throw new Error('Failed to open bucket');\n  }\n\n  return {\n    buckets: buckets,\n    bucketKey: buck.root.key\n  };\n}\nexport function getCurrentBucketZone() {\n  const bucketZone = localStorage.getItem(\"bucket.zone\");\n\n  if (bucketZone == null) {\n    return null;\n  }\n\n  return bucketZone;\n}\nexport async function setCurrentBucketZone(bucketZone) {\n  localStorage.removeItem(\"bucket.zone\");\n  localStorage.setItem(\"bucket.zone\", bucketZone);\n}\nexport async function bucketLinks(buckets, bucketKey) {\n  const links = await buckets.links(bucketKey);\n  return links;\n}\nexport async function bucketList(buckets) {\n  const bucketRoots = await buckets.list();\n  return bucketRoots;\n}","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/src/common/bucket.ts"],"names":["Buckets","getBucketKey","userIdentity","Error","buckets","withKeyInfo","key","debug","getToken","bucketZone","getCurrentBucketZone","buck","getOrCreate","setCurrentBucketZone","root","bucketKey","localStorage","getItem","removeItem","setItem","bucketLinks","links","bucketList","bucketRoots","list"],"mappings":"AAAA,SAASA,OAAT,QAAuF,cAAvF;AAGA,OAAO,eAAeC,YAAf,CAA4BC,YAA5B,EAAqD;AACxD,MAAI,CAACA,YAAL,EAAmB;AACf,UAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACH;;AACD,QAAMC,OAAO,GAAG,MAAMJ,OAAO,CAACK,WAAR,CAAoB;AACtCC,IAAAA,GAAG,EAAE;AADiC,GAApB,EAEnB;AACCC,IAAAA,KAAK,EAAE;AADR,GAFmB,CAAtB,CAJwD,CAUxD;;AACA,QAAMH,OAAO,CAACI,QAAR,CAAiBN,YAAjB,CAAN;AACA,QAAMO,UAAU,GAAGC,oBAAoB,EAAvC;AACA,MAAIC,IAAI,GAAG,IAAX;;AACA,MAAGF,UAAU,IAAE,IAAf,EAAoB;AAChBE,IAAAA,IAAI,GAAG,MAAMP,OAAO,CAACQ,WAAR,CAAoB,sBAApB,CAAb;AACAC,IAAAA,oBAAoB,CAAC,sBAAD,CAApB;AACH,GAHD,MAGK;AACDF,IAAAA,IAAI,GAAG,MAAMP,OAAO,CAACQ,WAAR,CAAoBH,UAApB,CAAb;AACH;;AACD,MAAI,CAACE,IAAI,CAACG,IAAV,EAAgB;AACZ,UAAM,IAAIX,KAAJ,CAAU,uBAAV,CAAN;AACH;;AACD,SAAO;AAACC,IAAAA,OAAO,EAAEA,OAAV;AAAmBW,IAAAA,SAAS,EAAEJ,IAAI,CAACG,IAAL,CAAUR;AAAxC,GAAP;AACH;AAED,OAAQ,SAASI,oBAAT,GAAiC;AACrC,QAAMD,UAAU,GAAGO,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAnB;;AACA,MAAIR,UAAU,IAAE,IAAhB,EAAqB;AACjB,WAAO,IAAP;AACH;;AACD,SAAOA,UAAP;AACH;AAED,OAAO,eAAeI,oBAAf,CAAoCJ,UAApC,EAAuD;AAC1DO,EAAAA,YAAY,CAACE,UAAb,CAAwB,aAAxB;AACAF,EAAAA,YAAY,CAACG,OAAb,CAAqB,aAArB,EAAmCV,UAAnC;AACH;AAKD,OAAO,eAAeW,WAAf,CAA2BhB,OAA3B,EAA2CW,SAA3C,EAA6D;AAChE,QAAMM,KAAK,GAAG,MAAMjB,OAAO,CAACiB,KAAR,CAAcN,SAAd,CAApB;AACA,SAAOM,KAAP;AACH;AAED,OAAO,eAAeC,UAAf,CAA0BlB,OAA1B,EAA6D;AAChE,QAAMmB,WAAW,GAAG,MAAMnB,OAAO,CAACoB,IAAR,EAA1B;AACA,SAAOD,WAAP;AACH","sourcesContent":["import { Buckets, PushPathResult, KeyInfo, PrivateKey, WithKeyInfoOptions, Root } from '@textile/hub'\nimport {async} from \"q\";\n\nexport async function getBucketKey(userIdentity:PrivateKey) {\n    if (!userIdentity) {\n        throw new Error('UserIdentity not set')\n    }\n    const buckets = await Buckets.withKeyInfo({\n        key: 'bbf34lt5akjatszwybsu5nfhdru'\n    } ,{\n        debug: false\n    });\n\n    // Authorize the user and your insecure keys with getToken\n    await buckets.getToken(userIdentity);\n    const bucketZone = getCurrentBucketZone();\n    let buck = null;\n    if(bucketZone==null){\n        buck = await buckets.getOrCreate('private.storage.zone');\n        setCurrentBucketZone('private.storage.zone')\n    }else{\n        buck = await buckets.getOrCreate(bucketZone)\n    }\n    if (!buck.root) {\n        throw new Error('Failed to open bucket')\n    }\n    return {buckets: buckets, bucketKey: buck.root.key};\n}\n\nexport  function getCurrentBucketZone()  {\n    const bucketZone = localStorage.getItem(\"bucket.zone\");\n    if( bucketZone==null){\n        return null;\n    }\n    return bucketZone\n}\n\nexport async function setCurrentBucketZone(bucketZone:string) {\n    localStorage.removeItem(\"bucket.zone\");\n    localStorage.setItem(\"bucket.zone\",bucketZone)\n}\n\n\n\n\nexport async function bucketLinks(buckets:Buckets,bucketKey:string) {\n    const links = await buckets.links(bucketKey);\n    return links;\n}\n\nexport async function bucketList(buckets:Buckets): Promise<Root[]>  {\n    const bucketRoots = await buckets.list();\n    return bucketRoots;\n}"]},"metadata":{},"sourceType":"module"}