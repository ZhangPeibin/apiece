{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst baddress = require('./address');\n\nconst bufferutils_1 = require('./bufferutils');\n\nconst classify = require('./classify');\n\nconst bcrypto = require('./crypto');\n\nconst ECPair = require('./ecpair');\n\nconst networks = require('./networks');\n\nconst payments = require('./payments');\n\nconst bscript = require('./script');\n\nconst script_1 = require('./script');\n\nconst transaction_1 = require('./transaction');\n\nconst types = require('./types');\n\nconst typeforce = require('typeforce');\n\nconst SCRIPT_TYPES = classify.types;\nconst PREVOUT_TYPES = new Set([// Raw\n'p2pkh', 'p2pk', 'p2wpkh', 'p2ms', // P2SH wrapped\n'p2sh-p2pkh', 'p2sh-p2pk', 'p2sh-p2wpkh', 'p2sh-p2ms', // P2WSH wrapped\n'p2wsh-p2pkh', 'p2wsh-p2pk', 'p2wsh-p2ms', // P2SH-P2WSH wrapper\n'p2sh-p2wsh-p2pkh', 'p2sh-p2wsh-p2pk', 'p2sh-p2wsh-p2ms']);\n\nfunction tfMessage(type, value, message) {\n  try {\n    typeforce(type, value);\n  } catch (err) {\n    throw new Error(message);\n  }\n}\n\nfunction txIsString(tx) {\n  return typeof tx === 'string' || tx instanceof String;\n}\n\nfunction txIsTransaction(tx) {\n  return tx instanceof transaction_1.Transaction;\n}\n\nclass TransactionBuilder {\n  // WARNING: maximumFeeRate is __NOT__ to be relied on,\n  //          it's just another potential safety mechanism (safety in-depth)\n  constructor(network = networks.bitcoin, maximumFeeRate = 2500) {\n    this.network = network;\n    this.maximumFeeRate = maximumFeeRate;\n    this.__PREV_TX_SET = {};\n    this.__INPUTS = [];\n    this.__TX = new transaction_1.Transaction();\n    this.__TX.version = 2;\n    this.__USE_LOW_R = false;\n    console.warn('Deprecation Warning: TransactionBuilder will be removed in the future. ' + '(v6.x.x or later) Please use the Psbt class instead. Examples of usage ' + 'are available in the transactions-psbt.js integration test file on our ' + 'Github. A high level explanation is available in the psbt.ts and psbt.js ' + 'files as well.');\n  }\n\n  static fromTransaction(transaction, network) {\n    const txb = new TransactionBuilder(network); // Copy transaction fields\n\n    txb.setVersion(transaction.version);\n    txb.setLockTime(transaction.locktime); // Copy outputs (done first to avoid signature invalidation)\n\n    transaction.outs.forEach(txOut => {\n      txb.addOutput(txOut.script, txOut.value);\n    }); // Copy inputs\n\n    transaction.ins.forEach(txIn => {\n      txb.__addInputUnsafe(txIn.hash, txIn.index, {\n        sequence: txIn.sequence,\n        script: txIn.script,\n        witness: txIn.witness\n      });\n    }); // fix some things not possible through the public API\n\n    txb.__INPUTS.forEach((input, i) => {\n      fixMultisigOrder(input, transaction, i);\n    });\n\n    return txb;\n  }\n\n  setLowR(setting) {\n    typeforce(typeforce.maybe(typeforce.Boolean), setting);\n\n    if (setting === undefined) {\n      setting = true;\n    }\n\n    this.__USE_LOW_R = setting;\n    return setting;\n  }\n\n  setLockTime(locktime) {\n    typeforce(types.UInt32, locktime); // if any signatures exist, throw\n\n    if (this.__INPUTS.some(input => {\n      if (!input.signatures) return false;\n      return input.signatures.some(s => s !== undefined);\n    })) {\n      throw new Error('No, this would invalidate signatures');\n    }\n\n    this.__TX.locktime = locktime;\n  }\n\n  setVersion(version) {\n    typeforce(types.UInt32, version); // XXX: this might eventually become more complex depending on what the versions represent\n\n    this.__TX.version = version;\n  }\n\n  addInput(txHash, vout, sequence, prevOutScript) {\n    if (!this.__canModifyInputs()) {\n      throw new Error('No, this would invalidate signatures');\n    }\n\n    let value; // is it a hex string?\n\n    if (txIsString(txHash)) {\n      // transaction hashs's are displayed in reverse order, un-reverse it\n      txHash = bufferutils_1.reverseBuffer(Buffer.from(txHash, 'hex')); // is it a Transaction object?\n    } else if (txIsTransaction(txHash)) {\n      const txOut = txHash.outs[vout];\n      prevOutScript = txOut.script;\n      value = txOut.value;\n      txHash = txHash.getHash(false);\n    }\n\n    return this.__addInputUnsafe(txHash, vout, {\n      sequence,\n      prevOutScript,\n      value\n    });\n  }\n\n  addOutput(scriptPubKey, value) {\n    if (!this.__canModifyOutputs()) {\n      throw new Error('No, this would invalidate signatures');\n    } // Attempt to get a script if it's a base58 or bech32 address string\n\n\n    if (typeof scriptPubKey === 'string') {\n      scriptPubKey = baddress.toOutputScript(scriptPubKey, this.network);\n    }\n\n    return this.__TX.addOutput(scriptPubKey, value);\n  }\n\n  build() {\n    return this.__build(false);\n  }\n\n  buildIncomplete() {\n    return this.__build(true);\n  }\n\n  sign(signParams, keyPair, redeemScript, hashType, witnessValue, witnessScript) {\n    trySign(getSigningData(this.network, this.__INPUTS, this.__needsOutputs.bind(this), this.__TX, signParams, keyPair, redeemScript, hashType, witnessValue, witnessScript, this.__USE_LOW_R));\n  }\n\n  __addInputUnsafe(txHash, vout, options) {\n    if (transaction_1.Transaction.isCoinbaseHash(txHash)) {\n      throw new Error('coinbase inputs not supported');\n    }\n\n    const prevTxOut = txHash.toString('hex') + ':' + vout;\n    if (this.__PREV_TX_SET[prevTxOut] !== undefined) throw new Error('Duplicate TxOut: ' + prevTxOut);\n    let input = {}; // derive what we can from the scriptSig\n\n    if (options.script !== undefined) {\n      input = expandInput(options.script, options.witness || []);\n    } // if an input value was given, retain it\n\n\n    if (options.value !== undefined) {\n      input.value = options.value;\n    } // derive what we can from the previous transactions output script\n\n\n    if (!input.prevOutScript && options.prevOutScript) {\n      let prevOutType;\n\n      if (!input.pubkeys && !input.signatures) {\n        const expanded = expandOutput(options.prevOutScript);\n\n        if (expanded.pubkeys) {\n          input.pubkeys = expanded.pubkeys;\n          input.signatures = expanded.signatures;\n        }\n\n        prevOutType = expanded.type;\n      }\n\n      input.prevOutScript = options.prevOutScript;\n      input.prevOutType = prevOutType || classify.output(options.prevOutScript);\n    }\n\n    const vin = this.__TX.addInput(txHash, vout, options.sequence, options.scriptSig);\n\n    this.__INPUTS[vin] = input;\n    this.__PREV_TX_SET[prevTxOut] = true;\n    return vin;\n  }\n\n  __build(allowIncomplete) {\n    if (!allowIncomplete) {\n      if (!this.__TX.ins.length) throw new Error('Transaction has no inputs');\n      if (!this.__TX.outs.length) throw new Error('Transaction has no outputs');\n    }\n\n    const tx = this.__TX.clone(); // create script signatures from inputs\n\n\n    this.__INPUTS.forEach((input, i) => {\n      if (!input.prevOutType && !allowIncomplete) throw new Error('Transaction is not complete');\n      const result = build(input.prevOutType, input, allowIncomplete);\n\n      if (!result) {\n        if (!allowIncomplete && input.prevOutType === SCRIPT_TYPES.NONSTANDARD) throw new Error('Unknown input type');\n        if (!allowIncomplete) throw new Error('Not enough information');\n        return;\n      }\n\n      tx.setInputScript(i, result.input);\n      tx.setWitness(i, result.witness);\n    });\n\n    if (!allowIncomplete) {\n      // do not rely on this, its merely a last resort\n      if (this.__overMaximumFees(tx.virtualSize())) {\n        throw new Error('Transaction has absurd fees');\n      }\n    }\n\n    return tx;\n  }\n\n  __canModifyInputs() {\n    return this.__INPUTS.every(input => {\n      if (!input.signatures) return true;\n      return input.signatures.every(signature => {\n        if (!signature) return true;\n        const hashType = signatureHashType(signature); // if SIGHASH_ANYONECANPAY is set, signatures would not\n        // be invalidated by more inputs\n\n        return (hashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY) !== 0;\n      });\n    });\n  }\n\n  __needsOutputs(signingHashType) {\n    if (signingHashType === transaction_1.Transaction.SIGHASH_ALL) {\n      return this.__TX.outs.length === 0;\n    } // if inputs are being signed with SIGHASH_NONE, we don't strictly need outputs\n    // .build() will fail, but .buildIncomplete() is OK\n\n\n    return this.__TX.outs.length === 0 && this.__INPUTS.some(input => {\n      if (!input.signatures) return false;\n      return input.signatures.some(signature => {\n        if (!signature) return false; // no signature, no issue\n\n        const hashType = signatureHashType(signature);\n        if (hashType & transaction_1.Transaction.SIGHASH_NONE) return false; // SIGHASH_NONE doesn't care about outputs\n\n        return true; // SIGHASH_* does care\n      });\n    });\n  }\n\n  __canModifyOutputs() {\n    const nInputs = this.__TX.ins.length;\n    const nOutputs = this.__TX.outs.length;\n    return this.__INPUTS.every(input => {\n      if (input.signatures === undefined) return true;\n      return input.signatures.every(signature => {\n        if (!signature) return true;\n        const hashType = signatureHashType(signature);\n        const hashTypeMod = hashType & 0x1f;\n        if (hashTypeMod === transaction_1.Transaction.SIGHASH_NONE) return true;\n\n        if (hashTypeMod === transaction_1.Transaction.SIGHASH_SINGLE) {\n          // if SIGHASH_SINGLE is set, and nInputs > nOutputs\n          // some signatures would be invalidated by the addition\n          // of more outputs\n          return nInputs <= nOutputs;\n        }\n\n        return false;\n      });\n    });\n  }\n\n  __overMaximumFees(bytes) {\n    // not all inputs will have .value defined\n    const incoming = this.__INPUTS.reduce((a, x) => a + (x.value >>> 0), 0); // but all outputs do, and if we have any input value\n    // we can immediately determine if the outputs are too small\n\n\n    const outgoing = this.__TX.outs.reduce((a, x) => a + x.value, 0);\n\n    const fee = incoming - outgoing;\n    const feeRate = fee / bytes;\n    return feeRate > this.maximumFeeRate;\n  }\n\n}\n\nexports.TransactionBuilder = TransactionBuilder;\n\nfunction expandInput(scriptSig, witnessStack, type, scriptPubKey) {\n  if (scriptSig.length === 0 && witnessStack.length === 0) return {};\n\n  if (!type) {\n    let ssType = classify.input(scriptSig, true);\n    let wsType = classify.witness(witnessStack, true);\n    if (ssType === SCRIPT_TYPES.NONSTANDARD) ssType = undefined;\n    if (wsType === SCRIPT_TYPES.NONSTANDARD) wsType = undefined;\n    type = ssType || wsType;\n  }\n\n  switch (type) {\n    case SCRIPT_TYPES.P2WPKH:\n      {\n        const {\n          output,\n          pubkey,\n          signature\n        } = payments.p2wpkh({\n          witness: witnessStack\n        });\n        return {\n          prevOutScript: output,\n          prevOutType: SCRIPT_TYPES.P2WPKH,\n          pubkeys: [pubkey],\n          signatures: [signature]\n        };\n      }\n\n    case SCRIPT_TYPES.P2PKH:\n      {\n        const {\n          output,\n          pubkey,\n          signature\n        } = payments.p2pkh({\n          input: scriptSig\n        });\n        return {\n          prevOutScript: output,\n          prevOutType: SCRIPT_TYPES.P2PKH,\n          pubkeys: [pubkey],\n          signatures: [signature]\n        };\n      }\n\n    case SCRIPT_TYPES.P2PK:\n      {\n        const {\n          signature\n        } = payments.p2pk({\n          input: scriptSig\n        });\n        return {\n          prevOutType: SCRIPT_TYPES.P2PK,\n          pubkeys: [undefined],\n          signatures: [signature]\n        };\n      }\n\n    case SCRIPT_TYPES.P2MS:\n      {\n        const {\n          m,\n          pubkeys,\n          signatures\n        } = payments.p2ms({\n          input: scriptSig,\n          output: scriptPubKey\n        }, {\n          allowIncomplete: true\n        });\n        return {\n          prevOutType: SCRIPT_TYPES.P2MS,\n          pubkeys,\n          signatures,\n          maxSignatures: m\n        };\n      }\n  }\n\n  if (type === SCRIPT_TYPES.P2SH) {\n    const {\n      output,\n      redeem\n    } = payments.p2sh({\n      input: scriptSig,\n      witness: witnessStack\n    });\n    const outputType = classify.output(redeem.output);\n    const expanded = expandInput(redeem.input, redeem.witness, outputType, redeem.output);\n    if (!expanded.prevOutType) return {};\n    return {\n      prevOutScript: output,\n      prevOutType: SCRIPT_TYPES.P2SH,\n      redeemScript: redeem.output,\n      redeemScriptType: expanded.prevOutType,\n      witnessScript: expanded.witnessScript,\n      witnessScriptType: expanded.witnessScriptType,\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures\n    };\n  }\n\n  if (type === SCRIPT_TYPES.P2WSH) {\n    const {\n      output,\n      redeem\n    } = payments.p2wsh({\n      input: scriptSig,\n      witness: witnessStack\n    });\n    const outputType = classify.output(redeem.output);\n    let expanded;\n\n    if (outputType === SCRIPT_TYPES.P2WPKH) {\n      expanded = expandInput(redeem.input, redeem.witness, outputType);\n    } else {\n      expanded = expandInput(bscript.compile(redeem.witness), [], outputType, redeem.output);\n    }\n\n    if (!expanded.prevOutType) return {};\n    return {\n      prevOutScript: output,\n      prevOutType: SCRIPT_TYPES.P2WSH,\n      witnessScript: redeem.output,\n      witnessScriptType: expanded.prevOutType,\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures\n    };\n  }\n\n  return {\n    prevOutType: SCRIPT_TYPES.NONSTANDARD,\n    prevOutScript: scriptSig\n  };\n} // could be done in expandInput, but requires the original Transaction for hashForSignature\n\n\nfunction fixMultisigOrder(input, transaction, vin) {\n  if (input.redeemScriptType !== SCRIPT_TYPES.P2MS || !input.redeemScript) return;\n  if (input.pubkeys.length === input.signatures.length) return;\n  const unmatched = input.signatures.concat();\n  input.signatures = input.pubkeys.map(pubKey => {\n    const keyPair = ECPair.fromPublicKey(pubKey);\n    let match; // check for a signature\n\n    unmatched.some((signature, i) => {\n      // skip if undefined || OP_0\n      if (!signature) return false; // TODO: avoid O(n) hashForSignature\n\n      const parsed = bscript.signature.decode(signature);\n      const hash = transaction.hashForSignature(vin, input.redeemScript, parsed.hashType); // skip if signature does not match pubKey\n\n      if (!keyPair.verify(hash, parsed.signature)) return false; // remove matched signature from unmatched\n\n      unmatched[i] = undefined;\n      match = signature;\n      return true;\n    });\n    return match;\n  });\n}\n\nfunction expandOutput(script, ourPubKey) {\n  typeforce(types.Buffer, script);\n  const type = classify.output(script);\n\n  switch (type) {\n    case SCRIPT_TYPES.P2PKH:\n      {\n        if (!ourPubKey) return {\n          type\n        }; // does our hash160(pubKey) match the output scripts?\n\n        const pkh1 = payments.p2pkh({\n          output: script\n        }).hash;\n        const pkh2 = bcrypto.hash160(ourPubKey);\n        if (!pkh1.equals(pkh2)) return {\n          type\n        };\n        return {\n          type,\n          pubkeys: [ourPubKey],\n          signatures: [undefined]\n        };\n      }\n\n    case SCRIPT_TYPES.P2WPKH:\n      {\n        if (!ourPubKey) return {\n          type\n        }; // does our hash160(pubKey) match the output scripts?\n\n        const wpkh1 = payments.p2wpkh({\n          output: script\n        }).hash;\n        const wpkh2 = bcrypto.hash160(ourPubKey);\n        if (!wpkh1.equals(wpkh2)) return {\n          type\n        };\n        return {\n          type,\n          pubkeys: [ourPubKey],\n          signatures: [undefined]\n        };\n      }\n\n    case SCRIPT_TYPES.P2PK:\n      {\n        const p2pk = payments.p2pk({\n          output: script\n        });\n        return {\n          type,\n          pubkeys: [p2pk.pubkey],\n          signatures: [undefined]\n        };\n      }\n\n    case SCRIPT_TYPES.P2MS:\n      {\n        const p2ms = payments.p2ms({\n          output: script\n        });\n        return {\n          type,\n          pubkeys: p2ms.pubkeys,\n          signatures: p2ms.pubkeys.map(() => undefined),\n          maxSignatures: p2ms.m\n        };\n      }\n  }\n\n  return {\n    type\n  };\n}\n\nfunction prepareInput(input, ourPubKey, redeemScript, witnessScript) {\n  if (redeemScript && witnessScript) {\n    const p2wsh = payments.p2wsh({\n      redeem: {\n        output: witnessScript\n      }\n    });\n    const p2wshAlt = payments.p2wsh({\n      output: redeemScript\n    });\n    const p2sh = payments.p2sh({\n      redeem: {\n        output: redeemScript\n      }\n    });\n    const p2shAlt = payments.p2sh({\n      redeem: p2wsh\n    }); // enforces P2SH(P2WSH(...))\n\n    if (!p2wsh.hash.equals(p2wshAlt.hash)) throw new Error('Witness script inconsistent with prevOutScript');\n    if (!p2sh.hash.equals(p2shAlt.hash)) throw new Error('Redeem script inconsistent with prevOutScript');\n    const expanded = expandOutput(p2wsh.redeem.output, ourPubKey);\n    if (!expanded.pubkeys) throw new Error(expanded.type + ' not supported as witnessScript (' + bscript.toASM(witnessScript) + ')');\n\n    if (input.signatures && input.signatures.some(x => x !== undefined)) {\n      expanded.signatures = input.signatures;\n    }\n\n    const signScript = witnessScript;\n    if (expanded.type === SCRIPT_TYPES.P2WPKH) throw new Error('P2SH(P2WSH(P2WPKH)) is a consensus failure');\n    return {\n      redeemScript,\n      redeemScriptType: SCRIPT_TYPES.P2WSH,\n      witnessScript,\n      witnessScriptType: expanded.type,\n      prevOutType: SCRIPT_TYPES.P2SH,\n      prevOutScript: p2sh.output,\n      hasWitness: true,\n      signScript,\n      signType: expanded.type,\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures,\n      maxSignatures: expanded.maxSignatures\n    };\n  }\n\n  if (redeemScript) {\n    const p2sh = payments.p2sh({\n      redeem: {\n        output: redeemScript\n      }\n    });\n\n    if (input.prevOutScript) {\n      let p2shAlt;\n\n      try {\n        p2shAlt = payments.p2sh({\n          output: input.prevOutScript\n        });\n      } catch (e) {\n        throw new Error('PrevOutScript must be P2SH');\n      }\n\n      if (!p2sh.hash.equals(p2shAlt.hash)) throw new Error('Redeem script inconsistent with prevOutScript');\n    }\n\n    const expanded = expandOutput(p2sh.redeem.output, ourPubKey);\n    if (!expanded.pubkeys) throw new Error(expanded.type + ' not supported as redeemScript (' + bscript.toASM(redeemScript) + ')');\n\n    if (input.signatures && input.signatures.some(x => x !== undefined)) {\n      expanded.signatures = input.signatures;\n    }\n\n    let signScript = redeemScript;\n\n    if (expanded.type === SCRIPT_TYPES.P2WPKH) {\n      signScript = payments.p2pkh({\n        pubkey: expanded.pubkeys[0]\n      }).output;\n    }\n\n    return {\n      redeemScript,\n      redeemScriptType: expanded.type,\n      prevOutType: SCRIPT_TYPES.P2SH,\n      prevOutScript: p2sh.output,\n      hasWitness: expanded.type === SCRIPT_TYPES.P2WPKH,\n      signScript,\n      signType: expanded.type,\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures,\n      maxSignatures: expanded.maxSignatures\n    };\n  }\n\n  if (witnessScript) {\n    const p2wsh = payments.p2wsh({\n      redeem: {\n        output: witnessScript\n      }\n    });\n\n    if (input.prevOutScript) {\n      const p2wshAlt = payments.p2wsh({\n        output: input.prevOutScript\n      });\n      if (!p2wsh.hash.equals(p2wshAlt.hash)) throw new Error('Witness script inconsistent with prevOutScript');\n    }\n\n    const expanded = expandOutput(p2wsh.redeem.output, ourPubKey);\n    if (!expanded.pubkeys) throw new Error(expanded.type + ' not supported as witnessScript (' + bscript.toASM(witnessScript) + ')');\n\n    if (input.signatures && input.signatures.some(x => x !== undefined)) {\n      expanded.signatures = input.signatures;\n    }\n\n    const signScript = witnessScript;\n    if (expanded.type === SCRIPT_TYPES.P2WPKH) throw new Error('P2WSH(P2WPKH) is a consensus failure');\n    return {\n      witnessScript,\n      witnessScriptType: expanded.type,\n      prevOutType: SCRIPT_TYPES.P2WSH,\n      prevOutScript: p2wsh.output,\n      hasWitness: true,\n      signScript,\n      signType: expanded.type,\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures,\n      maxSignatures: expanded.maxSignatures\n    };\n  }\n\n  if (input.prevOutType && input.prevOutScript) {\n    // embedded scripts are not possible without extra information\n    if (input.prevOutType === SCRIPT_TYPES.P2SH) throw new Error('PrevOutScript is ' + input.prevOutType + ', requires redeemScript');\n    if (input.prevOutType === SCRIPT_TYPES.P2WSH) throw new Error('PrevOutScript is ' + input.prevOutType + ', requires witnessScript');\n    if (!input.prevOutScript) throw new Error('PrevOutScript is missing');\n    const expanded = expandOutput(input.prevOutScript, ourPubKey);\n    if (!expanded.pubkeys) throw new Error(expanded.type + ' not supported (' + bscript.toASM(input.prevOutScript) + ')');\n\n    if (input.signatures && input.signatures.some(x => x !== undefined)) {\n      expanded.signatures = input.signatures;\n    }\n\n    let signScript = input.prevOutScript;\n\n    if (expanded.type === SCRIPT_TYPES.P2WPKH) {\n      signScript = payments.p2pkh({\n        pubkey: expanded.pubkeys[0]\n      }).output;\n    }\n\n    return {\n      prevOutType: expanded.type,\n      prevOutScript: input.prevOutScript,\n      hasWitness: expanded.type === SCRIPT_TYPES.P2WPKH,\n      signScript,\n      signType: expanded.type,\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures,\n      maxSignatures: expanded.maxSignatures\n    };\n  }\n\n  const prevOutScript = payments.p2pkh({\n    pubkey: ourPubKey\n  }).output;\n  return {\n    prevOutType: SCRIPT_TYPES.P2PKH,\n    prevOutScript,\n    hasWitness: false,\n    signScript: prevOutScript,\n    signType: SCRIPT_TYPES.P2PKH,\n    pubkeys: [ourPubKey],\n    signatures: [undefined]\n  };\n}\n\nfunction build(type, input, allowIncomplete) {\n  const pubkeys = input.pubkeys || [];\n  let signatures = input.signatures || [];\n\n  switch (type) {\n    case SCRIPT_TYPES.P2PKH:\n      {\n        if (pubkeys.length === 0) break;\n        if (signatures.length === 0) break;\n        return payments.p2pkh({\n          pubkey: pubkeys[0],\n          signature: signatures[0]\n        });\n      }\n\n    case SCRIPT_TYPES.P2WPKH:\n      {\n        if (pubkeys.length === 0) break;\n        if (signatures.length === 0) break;\n        return payments.p2wpkh({\n          pubkey: pubkeys[0],\n          signature: signatures[0]\n        });\n      }\n\n    case SCRIPT_TYPES.P2PK:\n      {\n        if (pubkeys.length === 0) break;\n        if (signatures.length === 0) break;\n        return payments.p2pk({\n          signature: signatures[0]\n        });\n      }\n\n    case SCRIPT_TYPES.P2MS:\n      {\n        const m = input.maxSignatures;\n\n        if (allowIncomplete) {\n          signatures = signatures.map(x => x || script_1.OPS.OP_0);\n        } else {\n          signatures = signatures.filter(x => x);\n        } // if the transaction is not not complete (complete), or if signatures.length === m, validate\n        // otherwise, the number of OP_0's may be >= m, so don't validate (boo)\n\n\n        const validate = !allowIncomplete || m === signatures.length;\n        return payments.p2ms({\n          m,\n          pubkeys,\n          signatures\n        }, {\n          allowIncomplete,\n          validate\n        });\n      }\n\n    case SCRIPT_TYPES.P2SH:\n      {\n        const redeem = build(input.redeemScriptType, input, allowIncomplete);\n        if (!redeem) return;\n        return payments.p2sh({\n          redeem: {\n            output: redeem.output || input.redeemScript,\n            input: redeem.input,\n            witness: redeem.witness\n          }\n        });\n      }\n\n    case SCRIPT_TYPES.P2WSH:\n      {\n        const redeem = build(input.witnessScriptType, input, allowIncomplete);\n        if (!redeem) return;\n        return payments.p2wsh({\n          redeem: {\n            output: input.witnessScript,\n            input: redeem.input,\n            witness: redeem.witness\n          }\n        });\n      }\n  }\n}\n\nfunction canSign(input) {\n  return input.signScript !== undefined && input.signType !== undefined && input.pubkeys !== undefined && input.signatures !== undefined && input.signatures.length === input.pubkeys.length && input.pubkeys.length > 0 && (input.hasWitness === false || input.value !== undefined);\n}\n\nfunction signatureHashType(buffer) {\n  return buffer.readUInt8(buffer.length - 1);\n}\n\nfunction checkSignArgs(inputs, signParams) {\n  if (!PREVOUT_TYPES.has(signParams.prevOutScriptType)) {\n    throw new TypeError(`Unknown prevOutScriptType \"${signParams.prevOutScriptType}\"`);\n  }\n\n  tfMessage(typeforce.Number, signParams.vin, `sign must include vin parameter as Number (input index)`);\n  tfMessage(types.Signer, signParams.keyPair, `sign must include keyPair parameter as Signer interface`);\n  tfMessage(typeforce.maybe(typeforce.Number), signParams.hashType, `sign hashType parameter must be a number`);\n  const prevOutType = (inputs[signParams.vin] || []).prevOutType;\n  const posType = signParams.prevOutScriptType;\n\n  switch (posType) {\n    case 'p2pkh':\n      if (prevOutType && prevOutType !== 'pubkeyhash') {\n        throw new TypeError(`input #${signParams.vin} is not of type p2pkh: ${prevOutType}`);\n      }\n\n      tfMessage(typeforce.value(undefined), signParams.witnessScript, `${posType} requires NO witnessScript`);\n      tfMessage(typeforce.value(undefined), signParams.redeemScript, `${posType} requires NO redeemScript`);\n      tfMessage(typeforce.value(undefined), signParams.witnessValue, `${posType} requires NO witnessValue`);\n      break;\n\n    case 'p2pk':\n      if (prevOutType && prevOutType !== 'pubkey') {\n        throw new TypeError(`input #${signParams.vin} is not of type p2pk: ${prevOutType}`);\n      }\n\n      tfMessage(typeforce.value(undefined), signParams.witnessScript, `${posType} requires NO witnessScript`);\n      tfMessage(typeforce.value(undefined), signParams.redeemScript, `${posType} requires NO redeemScript`);\n      tfMessage(typeforce.value(undefined), signParams.witnessValue, `${posType} requires NO witnessValue`);\n      break;\n\n    case 'p2wpkh':\n      if (prevOutType && prevOutType !== 'witnesspubkeyhash') {\n        throw new TypeError(`input #${signParams.vin} is not of type p2wpkh: ${prevOutType}`);\n      }\n\n      tfMessage(typeforce.value(undefined), signParams.witnessScript, `${posType} requires NO witnessScript`);\n      tfMessage(typeforce.value(undefined), signParams.redeemScript, `${posType} requires NO redeemScript`);\n      tfMessage(types.Satoshi, signParams.witnessValue, `${posType} requires witnessValue`);\n      break;\n\n    case 'p2ms':\n      if (prevOutType && prevOutType !== 'multisig') {\n        throw new TypeError(`input #${signParams.vin} is not of type p2ms: ${prevOutType}`);\n      }\n\n      tfMessage(typeforce.value(undefined), signParams.witnessScript, `${posType} requires NO witnessScript`);\n      tfMessage(typeforce.value(undefined), signParams.redeemScript, `${posType} requires NO redeemScript`);\n      tfMessage(typeforce.value(undefined), signParams.witnessValue, `${posType} requires NO witnessValue`);\n      break;\n\n    case 'p2sh-p2wpkh':\n      if (prevOutType && prevOutType !== 'scripthash') {\n        throw new TypeError(`input #${signParams.vin} is not of type p2sh-p2wpkh: ${prevOutType}`);\n      }\n\n      tfMessage(typeforce.value(undefined), signParams.witnessScript, `${posType} requires NO witnessScript`);\n      tfMessage(typeforce.Buffer, signParams.redeemScript, `${posType} requires redeemScript`);\n      tfMessage(types.Satoshi, signParams.witnessValue, `${posType} requires witnessValue`);\n      break;\n\n    case 'p2sh-p2ms':\n    case 'p2sh-p2pk':\n    case 'p2sh-p2pkh':\n      if (prevOutType && prevOutType !== 'scripthash') {\n        throw new TypeError(`input #${signParams.vin} is not of type ${posType}: ${prevOutType}`);\n      }\n\n      tfMessage(typeforce.value(undefined), signParams.witnessScript, `${posType} requires NO witnessScript`);\n      tfMessage(typeforce.Buffer, signParams.redeemScript, `${posType} requires redeemScript`);\n      tfMessage(typeforce.value(undefined), signParams.witnessValue, `${posType} requires NO witnessValue`);\n      break;\n\n    case 'p2wsh-p2ms':\n    case 'p2wsh-p2pk':\n    case 'p2wsh-p2pkh':\n      if (prevOutType && prevOutType !== 'witnessscripthash') {\n        throw new TypeError(`input #${signParams.vin} is not of type ${posType}: ${prevOutType}`);\n      }\n\n      tfMessage(typeforce.Buffer, signParams.witnessScript, `${posType} requires witnessScript`);\n      tfMessage(typeforce.value(undefined), signParams.redeemScript, `${posType} requires NO redeemScript`);\n      tfMessage(types.Satoshi, signParams.witnessValue, `${posType} requires witnessValue`);\n      break;\n\n    case 'p2sh-p2wsh-p2ms':\n    case 'p2sh-p2wsh-p2pk':\n    case 'p2sh-p2wsh-p2pkh':\n      if (prevOutType && prevOutType !== 'scripthash') {\n        throw new TypeError(`input #${signParams.vin} is not of type ${posType}: ${prevOutType}`);\n      }\n\n      tfMessage(typeforce.Buffer, signParams.witnessScript, `${posType} requires witnessScript`);\n      tfMessage(typeforce.Buffer, signParams.redeemScript, `${posType} requires witnessScript`);\n      tfMessage(types.Satoshi, signParams.witnessValue, `${posType} requires witnessScript`);\n      break;\n  }\n}\n\nfunction trySign({\n  input,\n  ourPubKey,\n  keyPair,\n  signatureHash,\n  hashType,\n  useLowR\n}) {\n  // enforce in order signing of public keys\n  let signed = false;\n\n  for (const [i, pubKey] of input.pubkeys.entries()) {\n    if (!ourPubKey.equals(pubKey)) continue;\n    if (input.signatures[i]) throw new Error('Signature already exists'); // TODO: add tests\n\n    if (ourPubKey.length !== 33 && input.hasWitness) {\n      throw new Error('BIP143 rejects uncompressed public keys in P2WPKH or P2WSH');\n    }\n\n    const signature = keyPair.sign(signatureHash, useLowR);\n    input.signatures[i] = bscript.signature.encode(signature, hashType);\n    signed = true;\n  }\n\n  if (!signed) throw new Error('Key pair cannot sign for this input');\n}\n\nfunction getSigningData(network, inputs, needsOutputs, tx, signParams, keyPair, redeemScript, hashType, witnessValue, witnessScript, useLowR) {\n  let vin;\n\n  if (typeof signParams === 'number') {\n    console.warn('DEPRECATED: TransactionBuilder sign method arguments ' + 'will change in v6, please use the TxbSignArg interface');\n    vin = signParams;\n  } else if (typeof signParams === 'object') {\n    checkSignArgs(inputs, signParams);\n    ({\n      vin,\n      keyPair,\n      redeemScript,\n      hashType,\n      witnessValue,\n      witnessScript\n    } = signParams);\n  } else {\n    throw new TypeError('TransactionBuilder sign first arg must be TxbSignArg or number');\n  }\n\n  if (keyPair === undefined) {\n    throw new Error('sign requires keypair');\n  } // TODO: remove keyPair.network matching in 4.0.0\n\n\n  if (keyPair.network && keyPair.network !== network) throw new TypeError('Inconsistent network');\n  if (!inputs[vin]) throw new Error('No input at index: ' + vin);\n  hashType = hashType || transaction_1.Transaction.SIGHASH_ALL;\n  if (needsOutputs(hashType)) throw new Error('Transaction needs outputs');\n  const input = inputs[vin]; // if redeemScript was previously provided, enforce consistency\n\n  if (input.redeemScript !== undefined && redeemScript && !input.redeemScript.equals(redeemScript)) {\n    throw new Error('Inconsistent redeemScript');\n  }\n\n  const ourPubKey = keyPair.publicKey || keyPair.getPublicKey && keyPair.getPublicKey();\n\n  if (!canSign(input)) {\n    if (witnessValue !== undefined) {\n      if (input.value !== undefined && input.value !== witnessValue) throw new Error('Input did not match witnessValue');\n      typeforce(types.Satoshi, witnessValue);\n      input.value = witnessValue;\n    }\n\n    if (!canSign(input)) {\n      const prepared = prepareInput(input, ourPubKey, redeemScript, witnessScript); // updates inline\n\n      Object.assign(input, prepared);\n    }\n\n    if (!canSign(input)) throw Error(input.prevOutType + ' not supported');\n  } // ready to sign\n\n\n  let signatureHash;\n\n  if (input.hasWitness) {\n    signatureHash = tx.hashForWitnessV0(vin, input.signScript, input.value, hashType);\n  } else {\n    signatureHash = tx.hashForSignature(vin, input.signScript, hashType);\n  }\n\n  return {\n    input,\n    ourPubKey,\n    keyPair,\n    signatureHash,\n    hashType,\n    useLowR: !!useLowR\n  };\n}","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/node_modules/bitcoinjs-lib/src/transaction_builder.js"],"names":["Object","defineProperty","exports","value","baddress","require","bufferutils_1","classify","bcrypto","ECPair","networks","payments","bscript","script_1","transaction_1","types","typeforce","SCRIPT_TYPES","PREVOUT_TYPES","Set","tfMessage","type","message","err","Error","txIsString","tx","String","txIsTransaction","Transaction","TransactionBuilder","constructor","network","bitcoin","maximumFeeRate","__PREV_TX_SET","__INPUTS","__TX","version","__USE_LOW_R","console","warn","fromTransaction","transaction","txb","setVersion","setLockTime","locktime","outs","forEach","txOut","addOutput","script","ins","txIn","__addInputUnsafe","hash","index","sequence","witness","input","i","fixMultisigOrder","setLowR","setting","maybe","Boolean","undefined","UInt32","some","signatures","s","addInput","txHash","vout","prevOutScript","__canModifyInputs","reverseBuffer","Buffer","from","getHash","scriptPubKey","__canModifyOutputs","toOutputScript","build","__build","buildIncomplete","sign","signParams","keyPair","redeemScript","hashType","witnessValue","witnessScript","trySign","getSigningData","__needsOutputs","bind","options","isCoinbaseHash","prevTxOut","toString","expandInput","prevOutType","pubkeys","expanded","expandOutput","output","vin","scriptSig","allowIncomplete","length","clone","result","NONSTANDARD","setInputScript","setWitness","__overMaximumFees","virtualSize","every","signature","signatureHashType","SIGHASH_ANYONECANPAY","signingHashType","SIGHASH_ALL","SIGHASH_NONE","nInputs","nOutputs","hashTypeMod","SIGHASH_SINGLE","bytes","incoming","reduce","a","x","outgoing","fee","feeRate","witnessStack","ssType","wsType","P2WPKH","pubkey","p2wpkh","P2PKH","p2pkh","P2PK","p2pk","P2MS","m","p2ms","maxSignatures","P2SH","redeem","p2sh","outputType","redeemScriptType","witnessScriptType","P2WSH","p2wsh","compile","unmatched","concat","map","pubKey","fromPublicKey","match","parsed","decode","hashForSignature","verify","ourPubKey","pkh1","pkh2","hash160","equals","wpkh1","wpkh2","prepareInput","p2wshAlt","p2shAlt","toASM","signScript","hasWitness","signType","e","OPS","OP_0","filter","validate","canSign","buffer","readUInt8","checkSignArgs","inputs","has","prevOutScriptType","TypeError","Number","Signer","posType","Satoshi","signatureHash","useLowR","signed","entries","encode","needsOutputs","publicKey","getPublicKey","prepared","assign","hashForWitnessV0"],"mappings":"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","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst baddress = require('./address');\nconst bufferutils_1 = require('./bufferutils');\nconst classify = require('./classify');\nconst bcrypto = require('./crypto');\nconst ECPair = require('./ecpair');\nconst networks = require('./networks');\nconst payments = require('./payments');\nconst bscript = require('./script');\nconst script_1 = require('./script');\nconst transaction_1 = require('./transaction');\nconst types = require('./types');\nconst typeforce = require('typeforce');\nconst SCRIPT_TYPES = classify.types;\nconst PREVOUT_TYPES = new Set([\n  // Raw\n  'p2pkh',\n  'p2pk',\n  'p2wpkh',\n  'p2ms',\n  // P2SH wrapped\n  'p2sh-p2pkh',\n  'p2sh-p2pk',\n  'p2sh-p2wpkh',\n  'p2sh-p2ms',\n  // P2WSH wrapped\n  'p2wsh-p2pkh',\n  'p2wsh-p2pk',\n  'p2wsh-p2ms',\n  // P2SH-P2WSH wrapper\n  'p2sh-p2wsh-p2pkh',\n  'p2sh-p2wsh-p2pk',\n  'p2sh-p2wsh-p2ms',\n]);\nfunction tfMessage(type, value, message) {\n  try {\n    typeforce(type, value);\n  } catch (err) {\n    throw new Error(message);\n  }\n}\nfunction txIsString(tx) {\n  return typeof tx === 'string' || tx instanceof String;\n}\nfunction txIsTransaction(tx) {\n  return tx instanceof transaction_1.Transaction;\n}\nclass TransactionBuilder {\n  // WARNING: maximumFeeRate is __NOT__ to be relied on,\n  //          it's just another potential safety mechanism (safety in-depth)\n  constructor(network = networks.bitcoin, maximumFeeRate = 2500) {\n    this.network = network;\n    this.maximumFeeRate = maximumFeeRate;\n    this.__PREV_TX_SET = {};\n    this.__INPUTS = [];\n    this.__TX = new transaction_1.Transaction();\n    this.__TX.version = 2;\n    this.__USE_LOW_R = false;\n    console.warn(\n      'Deprecation Warning: TransactionBuilder will be removed in the future. ' +\n        '(v6.x.x or later) Please use the Psbt class instead. Examples of usage ' +\n        'are available in the transactions-psbt.js integration test file on our ' +\n        'Github. A high level explanation is available in the psbt.ts and psbt.js ' +\n        'files as well.',\n    );\n  }\n  static fromTransaction(transaction, network) {\n    const txb = new TransactionBuilder(network);\n    // Copy transaction fields\n    txb.setVersion(transaction.version);\n    txb.setLockTime(transaction.locktime);\n    // Copy outputs (done first to avoid signature invalidation)\n    transaction.outs.forEach(txOut => {\n      txb.addOutput(txOut.script, txOut.value);\n    });\n    // Copy inputs\n    transaction.ins.forEach(txIn => {\n      txb.__addInputUnsafe(txIn.hash, txIn.index, {\n        sequence: txIn.sequence,\n        script: txIn.script,\n        witness: txIn.witness,\n      });\n    });\n    // fix some things not possible through the public API\n    txb.__INPUTS.forEach((input, i) => {\n      fixMultisigOrder(input, transaction, i);\n    });\n    return txb;\n  }\n  setLowR(setting) {\n    typeforce(typeforce.maybe(typeforce.Boolean), setting);\n    if (setting === undefined) {\n      setting = true;\n    }\n    this.__USE_LOW_R = setting;\n    return setting;\n  }\n  setLockTime(locktime) {\n    typeforce(types.UInt32, locktime);\n    // if any signatures exist, throw\n    if (\n      this.__INPUTS.some(input => {\n        if (!input.signatures) return false;\n        return input.signatures.some(s => s !== undefined);\n      })\n    ) {\n      throw new Error('No, this would invalidate signatures');\n    }\n    this.__TX.locktime = locktime;\n  }\n  setVersion(version) {\n    typeforce(types.UInt32, version);\n    // XXX: this might eventually become more complex depending on what the versions represent\n    this.__TX.version = version;\n  }\n  addInput(txHash, vout, sequence, prevOutScript) {\n    if (!this.__canModifyInputs()) {\n      throw new Error('No, this would invalidate signatures');\n    }\n    let value;\n    // is it a hex string?\n    if (txIsString(txHash)) {\n      // transaction hashs's are displayed in reverse order, un-reverse it\n      txHash = bufferutils_1.reverseBuffer(Buffer.from(txHash, 'hex'));\n      // is it a Transaction object?\n    } else if (txIsTransaction(txHash)) {\n      const txOut = txHash.outs[vout];\n      prevOutScript = txOut.script;\n      value = txOut.value;\n      txHash = txHash.getHash(false);\n    }\n    return this.__addInputUnsafe(txHash, vout, {\n      sequence,\n      prevOutScript,\n      value,\n    });\n  }\n  addOutput(scriptPubKey, value) {\n    if (!this.__canModifyOutputs()) {\n      throw new Error('No, this would invalidate signatures');\n    }\n    // Attempt to get a script if it's a base58 or bech32 address string\n    if (typeof scriptPubKey === 'string') {\n      scriptPubKey = baddress.toOutputScript(scriptPubKey, this.network);\n    }\n    return this.__TX.addOutput(scriptPubKey, value);\n  }\n  build() {\n    return this.__build(false);\n  }\n  buildIncomplete() {\n    return this.__build(true);\n  }\n  sign(\n    signParams,\n    keyPair,\n    redeemScript,\n    hashType,\n    witnessValue,\n    witnessScript,\n  ) {\n    trySign(\n      getSigningData(\n        this.network,\n        this.__INPUTS,\n        this.__needsOutputs.bind(this),\n        this.__TX,\n        signParams,\n        keyPair,\n        redeemScript,\n        hashType,\n        witnessValue,\n        witnessScript,\n        this.__USE_LOW_R,\n      ),\n    );\n  }\n  __addInputUnsafe(txHash, vout, options) {\n    if (transaction_1.Transaction.isCoinbaseHash(txHash)) {\n      throw new Error('coinbase inputs not supported');\n    }\n    const prevTxOut = txHash.toString('hex') + ':' + vout;\n    if (this.__PREV_TX_SET[prevTxOut] !== undefined)\n      throw new Error('Duplicate TxOut: ' + prevTxOut);\n    let input = {};\n    // derive what we can from the scriptSig\n    if (options.script !== undefined) {\n      input = expandInput(options.script, options.witness || []);\n    }\n    // if an input value was given, retain it\n    if (options.value !== undefined) {\n      input.value = options.value;\n    }\n    // derive what we can from the previous transactions output script\n    if (!input.prevOutScript && options.prevOutScript) {\n      let prevOutType;\n      if (!input.pubkeys && !input.signatures) {\n        const expanded = expandOutput(options.prevOutScript);\n        if (expanded.pubkeys) {\n          input.pubkeys = expanded.pubkeys;\n          input.signatures = expanded.signatures;\n        }\n        prevOutType = expanded.type;\n      }\n      input.prevOutScript = options.prevOutScript;\n      input.prevOutType = prevOutType || classify.output(options.prevOutScript);\n    }\n    const vin = this.__TX.addInput(\n      txHash,\n      vout,\n      options.sequence,\n      options.scriptSig,\n    );\n    this.__INPUTS[vin] = input;\n    this.__PREV_TX_SET[prevTxOut] = true;\n    return vin;\n  }\n  __build(allowIncomplete) {\n    if (!allowIncomplete) {\n      if (!this.__TX.ins.length) throw new Error('Transaction has no inputs');\n      if (!this.__TX.outs.length) throw new Error('Transaction has no outputs');\n    }\n    const tx = this.__TX.clone();\n    // create script signatures from inputs\n    this.__INPUTS.forEach((input, i) => {\n      if (!input.prevOutType && !allowIncomplete)\n        throw new Error('Transaction is not complete');\n      const result = build(input.prevOutType, input, allowIncomplete);\n      if (!result) {\n        if (!allowIncomplete && input.prevOutType === SCRIPT_TYPES.NONSTANDARD)\n          throw new Error('Unknown input type');\n        if (!allowIncomplete) throw new Error('Not enough information');\n        return;\n      }\n      tx.setInputScript(i, result.input);\n      tx.setWitness(i, result.witness);\n    });\n    if (!allowIncomplete) {\n      // do not rely on this, its merely a last resort\n      if (this.__overMaximumFees(tx.virtualSize())) {\n        throw new Error('Transaction has absurd fees');\n      }\n    }\n    return tx;\n  }\n  __canModifyInputs() {\n    return this.__INPUTS.every(input => {\n      if (!input.signatures) return true;\n      return input.signatures.every(signature => {\n        if (!signature) return true;\n        const hashType = signatureHashType(signature);\n        // if SIGHASH_ANYONECANPAY is set, signatures would not\n        // be invalidated by more inputs\n        return (\n          (hashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY) !== 0\n        );\n      });\n    });\n  }\n  __needsOutputs(signingHashType) {\n    if (signingHashType === transaction_1.Transaction.SIGHASH_ALL) {\n      return this.__TX.outs.length === 0;\n    }\n    // if inputs are being signed with SIGHASH_NONE, we don't strictly need outputs\n    // .build() will fail, but .buildIncomplete() is OK\n    return (\n      this.__TX.outs.length === 0 &&\n      this.__INPUTS.some(input => {\n        if (!input.signatures) return false;\n        return input.signatures.some(signature => {\n          if (!signature) return false; // no signature, no issue\n          const hashType = signatureHashType(signature);\n          if (hashType & transaction_1.Transaction.SIGHASH_NONE) return false; // SIGHASH_NONE doesn't care about outputs\n          return true; // SIGHASH_* does care\n        });\n      })\n    );\n  }\n  __canModifyOutputs() {\n    const nInputs = this.__TX.ins.length;\n    const nOutputs = this.__TX.outs.length;\n    return this.__INPUTS.every(input => {\n      if (input.signatures === undefined) return true;\n      return input.signatures.every(signature => {\n        if (!signature) return true;\n        const hashType = signatureHashType(signature);\n        const hashTypeMod = hashType & 0x1f;\n        if (hashTypeMod === transaction_1.Transaction.SIGHASH_NONE) return true;\n        if (hashTypeMod === transaction_1.Transaction.SIGHASH_SINGLE) {\n          // if SIGHASH_SINGLE is set, and nInputs > nOutputs\n          // some signatures would be invalidated by the addition\n          // of more outputs\n          return nInputs <= nOutputs;\n        }\n        return false;\n      });\n    });\n  }\n  __overMaximumFees(bytes) {\n    // not all inputs will have .value defined\n    const incoming = this.__INPUTS.reduce((a, x) => a + (x.value >>> 0), 0);\n    // but all outputs do, and if we have any input value\n    // we can immediately determine if the outputs are too small\n    const outgoing = this.__TX.outs.reduce((a, x) => a + x.value, 0);\n    const fee = incoming - outgoing;\n    const feeRate = fee / bytes;\n    return feeRate > this.maximumFeeRate;\n  }\n}\nexports.TransactionBuilder = TransactionBuilder;\nfunction expandInput(scriptSig, witnessStack, type, scriptPubKey) {\n  if (scriptSig.length === 0 && witnessStack.length === 0) return {};\n  if (!type) {\n    let ssType = classify.input(scriptSig, true);\n    let wsType = classify.witness(witnessStack, true);\n    if (ssType === SCRIPT_TYPES.NONSTANDARD) ssType = undefined;\n    if (wsType === SCRIPT_TYPES.NONSTANDARD) wsType = undefined;\n    type = ssType || wsType;\n  }\n  switch (type) {\n    case SCRIPT_TYPES.P2WPKH: {\n      const { output, pubkey, signature } = payments.p2wpkh({\n        witness: witnessStack,\n      });\n      return {\n        prevOutScript: output,\n        prevOutType: SCRIPT_TYPES.P2WPKH,\n        pubkeys: [pubkey],\n        signatures: [signature],\n      };\n    }\n    case SCRIPT_TYPES.P2PKH: {\n      const { output, pubkey, signature } = payments.p2pkh({\n        input: scriptSig,\n      });\n      return {\n        prevOutScript: output,\n        prevOutType: SCRIPT_TYPES.P2PKH,\n        pubkeys: [pubkey],\n        signatures: [signature],\n      };\n    }\n    case SCRIPT_TYPES.P2PK: {\n      const { signature } = payments.p2pk({ input: scriptSig });\n      return {\n        prevOutType: SCRIPT_TYPES.P2PK,\n        pubkeys: [undefined],\n        signatures: [signature],\n      };\n    }\n    case SCRIPT_TYPES.P2MS: {\n      const { m, pubkeys, signatures } = payments.p2ms(\n        {\n          input: scriptSig,\n          output: scriptPubKey,\n        },\n        { allowIncomplete: true },\n      );\n      return {\n        prevOutType: SCRIPT_TYPES.P2MS,\n        pubkeys,\n        signatures,\n        maxSignatures: m,\n      };\n    }\n  }\n  if (type === SCRIPT_TYPES.P2SH) {\n    const { output, redeem } = payments.p2sh({\n      input: scriptSig,\n      witness: witnessStack,\n    });\n    const outputType = classify.output(redeem.output);\n    const expanded = expandInput(\n      redeem.input,\n      redeem.witness,\n      outputType,\n      redeem.output,\n    );\n    if (!expanded.prevOutType) return {};\n    return {\n      prevOutScript: output,\n      prevOutType: SCRIPT_TYPES.P2SH,\n      redeemScript: redeem.output,\n      redeemScriptType: expanded.prevOutType,\n      witnessScript: expanded.witnessScript,\n      witnessScriptType: expanded.witnessScriptType,\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures,\n    };\n  }\n  if (type === SCRIPT_TYPES.P2WSH) {\n    const { output, redeem } = payments.p2wsh({\n      input: scriptSig,\n      witness: witnessStack,\n    });\n    const outputType = classify.output(redeem.output);\n    let expanded;\n    if (outputType === SCRIPT_TYPES.P2WPKH) {\n      expanded = expandInput(redeem.input, redeem.witness, outputType);\n    } else {\n      expanded = expandInput(\n        bscript.compile(redeem.witness),\n        [],\n        outputType,\n        redeem.output,\n      );\n    }\n    if (!expanded.prevOutType) return {};\n    return {\n      prevOutScript: output,\n      prevOutType: SCRIPT_TYPES.P2WSH,\n      witnessScript: redeem.output,\n      witnessScriptType: expanded.prevOutType,\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures,\n    };\n  }\n  return {\n    prevOutType: SCRIPT_TYPES.NONSTANDARD,\n    prevOutScript: scriptSig,\n  };\n}\n// could be done in expandInput, but requires the original Transaction for hashForSignature\nfunction fixMultisigOrder(input, transaction, vin) {\n  if (input.redeemScriptType !== SCRIPT_TYPES.P2MS || !input.redeemScript)\n    return;\n  if (input.pubkeys.length === input.signatures.length) return;\n  const unmatched = input.signatures.concat();\n  input.signatures = input.pubkeys.map(pubKey => {\n    const keyPair = ECPair.fromPublicKey(pubKey);\n    let match;\n    // check for a signature\n    unmatched.some((signature, i) => {\n      // skip if undefined || OP_0\n      if (!signature) return false;\n      // TODO: avoid O(n) hashForSignature\n      const parsed = bscript.signature.decode(signature);\n      const hash = transaction.hashForSignature(\n        vin,\n        input.redeemScript,\n        parsed.hashType,\n      );\n      // skip if signature does not match pubKey\n      if (!keyPair.verify(hash, parsed.signature)) return false;\n      // remove matched signature from unmatched\n      unmatched[i] = undefined;\n      match = signature;\n      return true;\n    });\n    return match;\n  });\n}\nfunction expandOutput(script, ourPubKey) {\n  typeforce(types.Buffer, script);\n  const type = classify.output(script);\n  switch (type) {\n    case SCRIPT_TYPES.P2PKH: {\n      if (!ourPubKey) return { type };\n      // does our hash160(pubKey) match the output scripts?\n      const pkh1 = payments.p2pkh({ output: script }).hash;\n      const pkh2 = bcrypto.hash160(ourPubKey);\n      if (!pkh1.equals(pkh2)) return { type };\n      return {\n        type,\n        pubkeys: [ourPubKey],\n        signatures: [undefined],\n      };\n    }\n    case SCRIPT_TYPES.P2WPKH: {\n      if (!ourPubKey) return { type };\n      // does our hash160(pubKey) match the output scripts?\n      const wpkh1 = payments.p2wpkh({ output: script }).hash;\n      const wpkh2 = bcrypto.hash160(ourPubKey);\n      if (!wpkh1.equals(wpkh2)) return { type };\n      return {\n        type,\n        pubkeys: [ourPubKey],\n        signatures: [undefined],\n      };\n    }\n    case SCRIPT_TYPES.P2PK: {\n      const p2pk = payments.p2pk({ output: script });\n      return {\n        type,\n        pubkeys: [p2pk.pubkey],\n        signatures: [undefined],\n      };\n    }\n    case SCRIPT_TYPES.P2MS: {\n      const p2ms = payments.p2ms({ output: script });\n      return {\n        type,\n        pubkeys: p2ms.pubkeys,\n        signatures: p2ms.pubkeys.map(() => undefined),\n        maxSignatures: p2ms.m,\n      };\n    }\n  }\n  return { type };\n}\nfunction prepareInput(input, ourPubKey, redeemScript, witnessScript) {\n  if (redeemScript && witnessScript) {\n    const p2wsh = payments.p2wsh({\n      redeem: { output: witnessScript },\n    });\n    const p2wshAlt = payments.p2wsh({ output: redeemScript });\n    const p2sh = payments.p2sh({ redeem: { output: redeemScript } });\n    const p2shAlt = payments.p2sh({ redeem: p2wsh });\n    // enforces P2SH(P2WSH(...))\n    if (!p2wsh.hash.equals(p2wshAlt.hash))\n      throw new Error('Witness script inconsistent with prevOutScript');\n    if (!p2sh.hash.equals(p2shAlt.hash))\n      throw new Error('Redeem script inconsistent with prevOutScript');\n    const expanded = expandOutput(p2wsh.redeem.output, ourPubKey);\n    if (!expanded.pubkeys)\n      throw new Error(\n        expanded.type +\n          ' not supported as witnessScript (' +\n          bscript.toASM(witnessScript) +\n          ')',\n      );\n    if (input.signatures && input.signatures.some(x => x !== undefined)) {\n      expanded.signatures = input.signatures;\n    }\n    const signScript = witnessScript;\n    if (expanded.type === SCRIPT_TYPES.P2WPKH)\n      throw new Error('P2SH(P2WSH(P2WPKH)) is a consensus failure');\n    return {\n      redeemScript,\n      redeemScriptType: SCRIPT_TYPES.P2WSH,\n      witnessScript,\n      witnessScriptType: expanded.type,\n      prevOutType: SCRIPT_TYPES.P2SH,\n      prevOutScript: p2sh.output,\n      hasWitness: true,\n      signScript,\n      signType: expanded.type,\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures,\n      maxSignatures: expanded.maxSignatures,\n    };\n  }\n  if (redeemScript) {\n    const p2sh = payments.p2sh({ redeem: { output: redeemScript } });\n    if (input.prevOutScript) {\n      let p2shAlt;\n      try {\n        p2shAlt = payments.p2sh({ output: input.prevOutScript });\n      } catch (e) {\n        throw new Error('PrevOutScript must be P2SH');\n      }\n      if (!p2sh.hash.equals(p2shAlt.hash))\n        throw new Error('Redeem script inconsistent with prevOutScript');\n    }\n    const expanded = expandOutput(p2sh.redeem.output, ourPubKey);\n    if (!expanded.pubkeys)\n      throw new Error(\n        expanded.type +\n          ' not supported as redeemScript (' +\n          bscript.toASM(redeemScript) +\n          ')',\n      );\n    if (input.signatures && input.signatures.some(x => x !== undefined)) {\n      expanded.signatures = input.signatures;\n    }\n    let signScript = redeemScript;\n    if (expanded.type === SCRIPT_TYPES.P2WPKH) {\n      signScript = payments.p2pkh({ pubkey: expanded.pubkeys[0] }).output;\n    }\n    return {\n      redeemScript,\n      redeemScriptType: expanded.type,\n      prevOutType: SCRIPT_TYPES.P2SH,\n      prevOutScript: p2sh.output,\n      hasWitness: expanded.type === SCRIPT_TYPES.P2WPKH,\n      signScript,\n      signType: expanded.type,\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures,\n      maxSignatures: expanded.maxSignatures,\n    };\n  }\n  if (witnessScript) {\n    const p2wsh = payments.p2wsh({ redeem: { output: witnessScript } });\n    if (input.prevOutScript) {\n      const p2wshAlt = payments.p2wsh({ output: input.prevOutScript });\n      if (!p2wsh.hash.equals(p2wshAlt.hash))\n        throw new Error('Witness script inconsistent with prevOutScript');\n    }\n    const expanded = expandOutput(p2wsh.redeem.output, ourPubKey);\n    if (!expanded.pubkeys)\n      throw new Error(\n        expanded.type +\n          ' not supported as witnessScript (' +\n          bscript.toASM(witnessScript) +\n          ')',\n      );\n    if (input.signatures && input.signatures.some(x => x !== undefined)) {\n      expanded.signatures = input.signatures;\n    }\n    const signScript = witnessScript;\n    if (expanded.type === SCRIPT_TYPES.P2WPKH)\n      throw new Error('P2WSH(P2WPKH) is a consensus failure');\n    return {\n      witnessScript,\n      witnessScriptType: expanded.type,\n      prevOutType: SCRIPT_TYPES.P2WSH,\n      prevOutScript: p2wsh.output,\n      hasWitness: true,\n      signScript,\n      signType: expanded.type,\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures,\n      maxSignatures: expanded.maxSignatures,\n    };\n  }\n  if (input.prevOutType && input.prevOutScript) {\n    // embedded scripts are not possible without extra information\n    if (input.prevOutType === SCRIPT_TYPES.P2SH)\n      throw new Error(\n        'PrevOutScript is ' + input.prevOutType + ', requires redeemScript',\n      );\n    if (input.prevOutType === SCRIPT_TYPES.P2WSH)\n      throw new Error(\n        'PrevOutScript is ' + input.prevOutType + ', requires witnessScript',\n      );\n    if (!input.prevOutScript) throw new Error('PrevOutScript is missing');\n    const expanded = expandOutput(input.prevOutScript, ourPubKey);\n    if (!expanded.pubkeys)\n      throw new Error(\n        expanded.type +\n          ' not supported (' +\n          bscript.toASM(input.prevOutScript) +\n          ')',\n      );\n    if (input.signatures && input.signatures.some(x => x !== undefined)) {\n      expanded.signatures = input.signatures;\n    }\n    let signScript = input.prevOutScript;\n    if (expanded.type === SCRIPT_TYPES.P2WPKH) {\n      signScript = payments.p2pkh({ pubkey: expanded.pubkeys[0] }).output;\n    }\n    return {\n      prevOutType: expanded.type,\n      prevOutScript: input.prevOutScript,\n      hasWitness: expanded.type === SCRIPT_TYPES.P2WPKH,\n      signScript,\n      signType: expanded.type,\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures,\n      maxSignatures: expanded.maxSignatures,\n    };\n  }\n  const prevOutScript = payments.p2pkh({ pubkey: ourPubKey }).output;\n  return {\n    prevOutType: SCRIPT_TYPES.P2PKH,\n    prevOutScript,\n    hasWitness: false,\n    signScript: prevOutScript,\n    signType: SCRIPT_TYPES.P2PKH,\n    pubkeys: [ourPubKey],\n    signatures: [undefined],\n  };\n}\nfunction build(type, input, allowIncomplete) {\n  const pubkeys = input.pubkeys || [];\n  let signatures = input.signatures || [];\n  switch (type) {\n    case SCRIPT_TYPES.P2PKH: {\n      if (pubkeys.length === 0) break;\n      if (signatures.length === 0) break;\n      return payments.p2pkh({ pubkey: pubkeys[0], signature: signatures[0] });\n    }\n    case SCRIPT_TYPES.P2WPKH: {\n      if (pubkeys.length === 0) break;\n      if (signatures.length === 0) break;\n      return payments.p2wpkh({ pubkey: pubkeys[0], signature: signatures[0] });\n    }\n    case SCRIPT_TYPES.P2PK: {\n      if (pubkeys.length === 0) break;\n      if (signatures.length === 0) break;\n      return payments.p2pk({ signature: signatures[0] });\n    }\n    case SCRIPT_TYPES.P2MS: {\n      const m = input.maxSignatures;\n      if (allowIncomplete) {\n        signatures = signatures.map(x => x || script_1.OPS.OP_0);\n      } else {\n        signatures = signatures.filter(x => x);\n      }\n      // if the transaction is not not complete (complete), or if signatures.length === m, validate\n      // otherwise, the number of OP_0's may be >= m, so don't validate (boo)\n      const validate = !allowIncomplete || m === signatures.length;\n      return payments.p2ms(\n        { m, pubkeys, signatures },\n        { allowIncomplete, validate },\n      );\n    }\n    case SCRIPT_TYPES.P2SH: {\n      const redeem = build(input.redeemScriptType, input, allowIncomplete);\n      if (!redeem) return;\n      return payments.p2sh({\n        redeem: {\n          output: redeem.output || input.redeemScript,\n          input: redeem.input,\n          witness: redeem.witness,\n        },\n      });\n    }\n    case SCRIPT_TYPES.P2WSH: {\n      const redeem = build(input.witnessScriptType, input, allowIncomplete);\n      if (!redeem) return;\n      return payments.p2wsh({\n        redeem: {\n          output: input.witnessScript,\n          input: redeem.input,\n          witness: redeem.witness,\n        },\n      });\n    }\n  }\n}\nfunction canSign(input) {\n  return (\n    input.signScript !== undefined &&\n    input.signType !== undefined &&\n    input.pubkeys !== undefined &&\n    input.signatures !== undefined &&\n    input.signatures.length === input.pubkeys.length &&\n    input.pubkeys.length > 0 &&\n    (input.hasWitness === false || input.value !== undefined)\n  );\n}\nfunction signatureHashType(buffer) {\n  return buffer.readUInt8(buffer.length - 1);\n}\nfunction checkSignArgs(inputs, signParams) {\n  if (!PREVOUT_TYPES.has(signParams.prevOutScriptType)) {\n    throw new TypeError(\n      `Unknown prevOutScriptType \"${signParams.prevOutScriptType}\"`,\n    );\n  }\n  tfMessage(\n    typeforce.Number,\n    signParams.vin,\n    `sign must include vin parameter as Number (input index)`,\n  );\n  tfMessage(\n    types.Signer,\n    signParams.keyPair,\n    `sign must include keyPair parameter as Signer interface`,\n  );\n  tfMessage(\n    typeforce.maybe(typeforce.Number),\n    signParams.hashType,\n    `sign hashType parameter must be a number`,\n  );\n  const prevOutType = (inputs[signParams.vin] || []).prevOutType;\n  const posType = signParams.prevOutScriptType;\n  switch (posType) {\n    case 'p2pkh':\n      if (prevOutType && prevOutType !== 'pubkeyhash') {\n        throw new TypeError(\n          `input #${signParams.vin} is not of type p2pkh: ${prevOutType}`,\n        );\n      }\n      tfMessage(\n        typeforce.value(undefined),\n        signParams.witnessScript,\n        `${posType} requires NO witnessScript`,\n      );\n      tfMessage(\n        typeforce.value(undefined),\n        signParams.redeemScript,\n        `${posType} requires NO redeemScript`,\n      );\n      tfMessage(\n        typeforce.value(undefined),\n        signParams.witnessValue,\n        `${posType} requires NO witnessValue`,\n      );\n      break;\n    case 'p2pk':\n      if (prevOutType && prevOutType !== 'pubkey') {\n        throw new TypeError(\n          `input #${signParams.vin} is not of type p2pk: ${prevOutType}`,\n        );\n      }\n      tfMessage(\n        typeforce.value(undefined),\n        signParams.witnessScript,\n        `${posType} requires NO witnessScript`,\n      );\n      tfMessage(\n        typeforce.value(undefined),\n        signParams.redeemScript,\n        `${posType} requires NO redeemScript`,\n      );\n      tfMessage(\n        typeforce.value(undefined),\n        signParams.witnessValue,\n        `${posType} requires NO witnessValue`,\n      );\n      break;\n    case 'p2wpkh':\n      if (prevOutType && prevOutType !== 'witnesspubkeyhash') {\n        throw new TypeError(\n          `input #${signParams.vin} is not of type p2wpkh: ${prevOutType}`,\n        );\n      }\n      tfMessage(\n        typeforce.value(undefined),\n        signParams.witnessScript,\n        `${posType} requires NO witnessScript`,\n      );\n      tfMessage(\n        typeforce.value(undefined),\n        signParams.redeemScript,\n        `${posType} requires NO redeemScript`,\n      );\n      tfMessage(\n        types.Satoshi,\n        signParams.witnessValue,\n        `${posType} requires witnessValue`,\n      );\n      break;\n    case 'p2ms':\n      if (prevOutType && prevOutType !== 'multisig') {\n        throw new TypeError(\n          `input #${signParams.vin} is not of type p2ms: ${prevOutType}`,\n        );\n      }\n      tfMessage(\n        typeforce.value(undefined),\n        signParams.witnessScript,\n        `${posType} requires NO witnessScript`,\n      );\n      tfMessage(\n        typeforce.value(undefined),\n        signParams.redeemScript,\n        `${posType} requires NO redeemScript`,\n      );\n      tfMessage(\n        typeforce.value(undefined),\n        signParams.witnessValue,\n        `${posType} requires NO witnessValue`,\n      );\n      break;\n    case 'p2sh-p2wpkh':\n      if (prevOutType && prevOutType !== 'scripthash') {\n        throw new TypeError(\n          `input #${signParams.vin} is not of type p2sh-p2wpkh: ${prevOutType}`,\n        );\n      }\n      tfMessage(\n        typeforce.value(undefined),\n        signParams.witnessScript,\n        `${posType} requires NO witnessScript`,\n      );\n      tfMessage(\n        typeforce.Buffer,\n        signParams.redeemScript,\n        `${posType} requires redeemScript`,\n      );\n      tfMessage(\n        types.Satoshi,\n        signParams.witnessValue,\n        `${posType} requires witnessValue`,\n      );\n      break;\n    case 'p2sh-p2ms':\n    case 'p2sh-p2pk':\n    case 'p2sh-p2pkh':\n      if (prevOutType && prevOutType !== 'scripthash') {\n        throw new TypeError(\n          `input #${signParams.vin} is not of type ${posType}: ${prevOutType}`,\n        );\n      }\n      tfMessage(\n        typeforce.value(undefined),\n        signParams.witnessScript,\n        `${posType} requires NO witnessScript`,\n      );\n      tfMessage(\n        typeforce.Buffer,\n        signParams.redeemScript,\n        `${posType} requires redeemScript`,\n      );\n      tfMessage(\n        typeforce.value(undefined),\n        signParams.witnessValue,\n        `${posType} requires NO witnessValue`,\n      );\n      break;\n    case 'p2wsh-p2ms':\n    case 'p2wsh-p2pk':\n    case 'p2wsh-p2pkh':\n      if (prevOutType && prevOutType !== 'witnessscripthash') {\n        throw new TypeError(\n          `input #${signParams.vin} is not of type ${posType}: ${prevOutType}`,\n        );\n      }\n      tfMessage(\n        typeforce.Buffer,\n        signParams.witnessScript,\n        `${posType} requires witnessScript`,\n      );\n      tfMessage(\n        typeforce.value(undefined),\n        signParams.redeemScript,\n        `${posType} requires NO redeemScript`,\n      );\n      tfMessage(\n        types.Satoshi,\n        signParams.witnessValue,\n        `${posType} requires witnessValue`,\n      );\n      break;\n    case 'p2sh-p2wsh-p2ms':\n    case 'p2sh-p2wsh-p2pk':\n    case 'p2sh-p2wsh-p2pkh':\n      if (prevOutType && prevOutType !== 'scripthash') {\n        throw new TypeError(\n          `input #${signParams.vin} is not of type ${posType}: ${prevOutType}`,\n        );\n      }\n      tfMessage(\n        typeforce.Buffer,\n        signParams.witnessScript,\n        `${posType} requires witnessScript`,\n      );\n      tfMessage(\n        typeforce.Buffer,\n        signParams.redeemScript,\n        `${posType} requires witnessScript`,\n      );\n      tfMessage(\n        types.Satoshi,\n        signParams.witnessValue,\n        `${posType} requires witnessScript`,\n      );\n      break;\n  }\n}\nfunction trySign({\n  input,\n  ourPubKey,\n  keyPair,\n  signatureHash,\n  hashType,\n  useLowR,\n}) {\n  // enforce in order signing of public keys\n  let signed = false;\n  for (const [i, pubKey] of input.pubkeys.entries()) {\n    if (!ourPubKey.equals(pubKey)) continue;\n    if (input.signatures[i]) throw new Error('Signature already exists');\n    // TODO: add tests\n    if (ourPubKey.length !== 33 && input.hasWitness) {\n      throw new Error(\n        'BIP143 rejects uncompressed public keys in P2WPKH or P2WSH',\n      );\n    }\n    const signature = keyPair.sign(signatureHash, useLowR);\n    input.signatures[i] = bscript.signature.encode(signature, hashType);\n    signed = true;\n  }\n  if (!signed) throw new Error('Key pair cannot sign for this input');\n}\nfunction getSigningData(\n  network,\n  inputs,\n  needsOutputs,\n  tx,\n  signParams,\n  keyPair,\n  redeemScript,\n  hashType,\n  witnessValue,\n  witnessScript,\n  useLowR,\n) {\n  let vin;\n  if (typeof signParams === 'number') {\n    console.warn(\n      'DEPRECATED: TransactionBuilder sign method arguments ' +\n        'will change in v6, please use the TxbSignArg interface',\n    );\n    vin = signParams;\n  } else if (typeof signParams === 'object') {\n    checkSignArgs(inputs, signParams);\n    ({\n      vin,\n      keyPair,\n      redeemScript,\n      hashType,\n      witnessValue,\n      witnessScript,\n    } = signParams);\n  } else {\n    throw new TypeError(\n      'TransactionBuilder sign first arg must be TxbSignArg or number',\n    );\n  }\n  if (keyPair === undefined) {\n    throw new Error('sign requires keypair');\n  }\n  // TODO: remove keyPair.network matching in 4.0.0\n  if (keyPair.network && keyPair.network !== network)\n    throw new TypeError('Inconsistent network');\n  if (!inputs[vin]) throw new Error('No input at index: ' + vin);\n  hashType = hashType || transaction_1.Transaction.SIGHASH_ALL;\n  if (needsOutputs(hashType)) throw new Error('Transaction needs outputs');\n  const input = inputs[vin];\n  // if redeemScript was previously provided, enforce consistency\n  if (\n    input.redeemScript !== undefined &&\n    redeemScript &&\n    !input.redeemScript.equals(redeemScript)\n  ) {\n    throw new Error('Inconsistent redeemScript');\n  }\n  const ourPubKey =\n    keyPair.publicKey || (keyPair.getPublicKey && keyPair.getPublicKey());\n  if (!canSign(input)) {\n    if (witnessValue !== undefined) {\n      if (input.value !== undefined && input.value !== witnessValue)\n        throw new Error('Input did not match witnessValue');\n      typeforce(types.Satoshi, witnessValue);\n      input.value = witnessValue;\n    }\n    if (!canSign(input)) {\n      const prepared = prepareInput(\n        input,\n        ourPubKey,\n        redeemScript,\n        witnessScript,\n      );\n      // updates inline\n      Object.assign(input, prepared);\n    }\n    if (!canSign(input)) throw Error(input.prevOutType + ' not supported');\n  }\n  // ready to sign\n  let signatureHash;\n  if (input.hasWitness) {\n    signatureHash = tx.hashForWitnessV0(\n      vin,\n      input.signScript,\n      input.value,\n      hashType,\n    );\n  } else {\n    signatureHash = tx.hashForSignature(vin, input.signScript, hashType);\n  }\n  return {\n    input,\n    ourPubKey,\n    keyPair,\n    signatureHash,\n    hashType,\n    useLowR: !!useLowR,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}