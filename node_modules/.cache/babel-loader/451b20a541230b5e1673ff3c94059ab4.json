{"ast":null,"code":"var _jsxFileName = \"/Users/wiki/code/filecoin/private.storage/src/views/dashborad/Dashboard.js\";\nimport * as React from \"react\";\nimport './Dashboard.css';\nimport { getLocalUserIdentity } from \"../../common/user\";\nimport { getBucketKey } from \"../../common/bucket\";\nimport { getFileIndex, storeIndex } from \"../../common/FileIndex\";\nimport CustomizedDropZone from \"../../components/CustomizedDropZone/CustomizedDropZone\";\nimport Dialog from \"@material-ui/core/Dialog/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions/DialogActions\";\nimport Header from \"../app/PrivateLandingPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class DashboardPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.folderInputChange = folderName => {\n      this.setState({\n        folderName: folderName.target.value\n      });\n    };\n\n    this.handleClickOpen = () => {\n      this.setState({\n        dialogOpen: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        dialogOpen: false\n      });\n    };\n\n    this.handleConfirm = async () => {\n      this.setState({\n        dialogOpen: false\n      });\n      const folderName = this.state.folderName;\n      const path = `${'/'}${folderName}${'/'}${'.seed'}`;\n      await this.state.buckets.pushPath(this.state.bucketKey, path, new Uint8Array(128));\n    };\n\n    this.newFolder = data => {\n      this.handleClickOpen();\n    };\n\n    this.fileSelectCallback = data => {\n      this.setState({\n        checked: data\n      });\n    };\n\n    this.fileUploadCallback = async data => {\n      let dataAlreadyInPaths = false;\n      this.state.index.paths.forEach(function (element) {\n        if (element['cid'] === data['cid']) {\n          dataAlreadyInPaths = true;\n        }\n      });\n\n      if (!dataAlreadyInPaths) {\n        this.setState({\n          index: { ...this.state.index,\n            paths: [...this.state.index.paths, data],\n            counts: this.state.index.counts + 1\n          }\n        });\n        await storeIndex(this.state.index, this.state.buckets, this.state.bucketKey);\n      }\n    };\n\n    if (props.location.query != null) {\n      this.state = {\n        bucketKey: props.location.query.bucketKey,\n        buckets: props.location.query.buckets,\n        links: props.location.query.links,\n        dialogOpen: false\n      };\n    }\n  }\n\n  async componentWillMount() {\n    if (this.state == null || this.state.bucketKey == null || this.state.buckets == null) {\n      const userIdentity = await getLocalUserIdentity();\n\n      if (userIdentity != null) {\n        const {\n          bucketKey,\n          buckets\n        } = await getBucketKey(userIdentity);\n        this.setState({\n          bucketKey: bucketKey,\n          buckets: buckets\n        });\n      } else {\n        this.props.history.push({\n          pathname: \"/\"\n        });\n      }\n    }\n\n    let loading = document.getElementById('loader');\n    loading.style.display = 'none';\n    const index = await getFileIndex(this.state.buckets, this.state.bucketKey);\n\n    if (index) {\n      this.setState({\n        index: index\n      });\n    }\n  }\n\n  render() {\n    if (this.state == null || this.state.buckets == null || this.state.bucketKey == null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        color: \"transparent\",\n        brand: \"Store Data \\xB7 Reshape Privacy\",\n        fixed: true,\n        changeColorOnScroll: {\n          height: 400,\n          color: \"white\"\n        },\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CustomizedDropZone, {\n        bucketKey: this.state.bucketKey,\n        buckets: this.state.buckets,\n        callback: this.fileUploadCallback,\n        newFolder: this.newFolder,\n        checked: this.state.checked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FileZone, {\n        index: this.state.index,\n        callback: this.fileSelectCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Dialog, {\n          open: this.state.dialogOpen,\n          onClose: this.handleClose,\n          \"aria-labelledby\": \"form-dialog-title\",\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            id: \"form-dialog-title\",\n            children: \"New Folder\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n              children: \"Please enter the folder name, for better use, please enter English.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              onChange: this.folderInputChange,\n              autoFocus: true,\n              margin: \"dense\",\n              id: \"name\",\n              label: \"Folder Name\",\n              type: \"text\",\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: this.handleClose,\n              color: \"primary\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: this.handleConfirm.bind(this),\n              color: \"primary\",\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/src/views/dashborad/Dashboard.js"],"names":["React","getLocalUserIdentity","getBucketKey","getFileIndex","storeIndex","CustomizedDropZone","Dialog","DialogTitle","DialogActions","Header","DashboardPage","Component","constructor","props","folderInputChange","folderName","setState","target","value","handleClickOpen","dialogOpen","handleClose","handleConfirm","state","path","buckets","pushPath","bucketKey","Uint8Array","newFolder","data","fileSelectCallback","checked","fileUploadCallback","dataAlreadyInPaths","index","paths","forEach","element","counts","location","query","links","componentWillMount","userIdentity","history","push","pathname","loading","document","getElementById","style","display","render","height","color","rest","bind"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport './Dashboard.css'\nimport {getLocalUserIdentity,} from \"../../common/user\";\nimport {getBucketKey} from \"../../common/bucket\";\nimport {getFileIndex, storeIndex} from \"../../common/FileIndex\";\nimport CustomizedDropZone from \"../../components/CustomizedDropZone/CustomizedDropZone\";\nimport Dialog from \"@material-ui/core/Dialog/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions/DialogActions\";\nimport Header from \"../app/PrivateLandingPage\";\n\nexport class DashboardPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        if (props.location.query != null) {\n            this.state = {\n                bucketKey: props.location.query.bucketKey,\n                buckets: props.location.query.buckets,\n                links: props.location.query.links,\n                dialogOpen: false,\n            }\n        }\n    }\n\n    async componentWillMount() {\n        if (this.state == null || this.state.bucketKey == null || this.state.buckets == null) {\n            const userIdentity = await getLocalUserIdentity();\n            if (userIdentity != null) {\n                const {bucketKey, buckets} = await getBucketKey(userIdentity);\n                this.setState({\n                    bucketKey: bucketKey,\n                    buckets: buckets,\n                })\n            } else {\n                this.props.history.push({pathname: \"/\"});\n            }\n        }\n        let loading = document.getElementById('loader');\n        loading.style.display = 'none';\n        const index = await getFileIndex(this.state.buckets, this.state.bucketKey);\n        if (index) {\n            this.setState({\n                index: index\n            })\n        }\n    }\n\n    render() {\n        if (this.state == null || this.state.buckets == null || this.state.bucketKey == null) {\n            return <div/>\n        }\n        return (\n            <div>\n                <Header\n                    color=\"transparent\"\n                    brand=\"Store Data · Reshape Privacy\"\n                    fixed\n                    changeColorOnScroll={{\n                        height: 400,\n                        color: \"white\",\n                    }}\n                    {...rest}\n                />\n\n                <CustomizedDropZone bucketKey={this.state.bucketKey}\n                                    buckets={this.state.buckets}\n                                    callback={this.fileUploadCallback}\n                                    newFolder={this.newFolder}\n                                    checked={this.state.checked}/>\n                <FileZone index={this.state.index} callback={this.fileSelectCallback}/>\n\n                <div>\n                    <Dialog open={this.state.dialogOpen} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\n                        <DialogTitle id=\"form-dialog-title\">New Folder</DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                Please enter the folder name, for better use, please enter English.\n                            </DialogContentText>\n                            <TextField\n                                onChange={this.folderInputChange}\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"name\"\n                                label=\"Folder Name\"\n                                type=\"text\"\n                                fullWidth\n                            />\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={this.handleClose} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={this.handleConfirm.bind(this)} color=\"primary\">\n                                Confirm\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n                </div>\n            </div>\n        );\n    }\n\n    folderInputChange = (folderName) => {\n        this.setState({\n            folderName: folderName.target.value\n        })\n    };\n\n    handleClickOpen = () => {\n        this.setState({\n                dialogOpen: true\n            }\n        );\n    };\n\n    handleClose = () => {\n        this.setState({\n                dialogOpen: false\n            }\n        );\n    };\n\n    handleConfirm = async () => {\n        this.setState({\n                dialogOpen: false\n            }\n        );\n        const folderName = this.state.folderName;\n        const path = `${'/'}${folderName}${'/'}${'.seed'}`;\n        await this.state.buckets.pushPath(this.state.bucketKey, path, new Uint8Array(128))\n    };\n\n    newFolder = (data) => {\n        this.handleClickOpen();\n    };\n\n    fileSelectCallback = (data) => {\n        this.setState({\n            checked: data\n        });\n    };\n\n    fileUploadCallback = async (data) => {\n        let dataAlreadyInPaths = false;\n        this.state.index.paths.forEach(function (element) {\n            if (element['cid'] === data['cid']) {\n                dataAlreadyInPaths = true;\n            }\n        });\n        if (!dataAlreadyInPaths) {\n            this.setState({\n                index: {\n                    ...this.state.index,\n                    paths: [...this.state.index.paths, data],\n                    counts: this.state.index.counts + 1\n                },\n            });\n            await storeIndex(this.state.index, this.state.buckets, this.state.bucketKey);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}