{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction makeConverter(TYPE_BYTE) {\n  function decode(keyVal) {\n    if (keyVal.key[0] !== TYPE_BYTE) {\n      throw new Error('Decode Error: could not decode witnessScript with key 0x' + keyVal.key.toString('hex'));\n    }\n\n    return keyVal.value;\n  }\n\n  function encode(data) {\n    const key = Buffer.from([TYPE_BYTE]);\n    return {\n      key,\n      value: data\n    };\n  }\n\n  const expected = 'Buffer';\n\n  function check(data) {\n    return Buffer.isBuffer(data);\n  }\n\n  function canAdd(currentData, newData) {\n    return !!currentData && !!newData && currentData.witnessScript === undefined;\n  }\n\n  return {\n    decode,\n    encode,\n    check,\n    expected,\n    canAdd\n  };\n}\n\nexports.makeConverter = makeConverter;","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/node_modules/bip174/src/lib/converter/shared/witnessScript.js"],"names":["Object","defineProperty","exports","value","makeConverter","TYPE_BYTE","decode","keyVal","key","Error","toString","encode","data","Buffer","from","expected","check","isBuffer","canAdd","currentData","newData","witnessScript","undefined"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,SAASC,aAAT,CAAuBC,SAAvB,EAAkC;AAChC,WAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACtB,QAAIA,MAAM,CAACC,GAAP,CAAW,CAAX,MAAkBH,SAAtB,EAAiC;AAC/B,YAAM,IAAII,KAAJ,CACJ,6DACEF,MAAM,CAACC,GAAP,CAAWE,QAAX,CAAoB,KAApB,CAFE,CAAN;AAID;;AACD,WAAOH,MAAM,CAACJ,KAAd;AACD;;AACD,WAASQ,MAAT,CAAgBC,IAAhB,EAAsB;AACpB,UAAMJ,GAAG,GAAGK,MAAM,CAACC,IAAP,CAAY,CAACT,SAAD,CAAZ,CAAZ;AACA,WAAO;AACLG,MAAAA,GADK;AAELL,MAAAA,KAAK,EAAES;AAFF,KAAP;AAID;;AACD,QAAMG,QAAQ,GAAG,QAAjB;;AACA,WAASC,KAAT,CAAeJ,IAAf,EAAqB;AACnB,WAAOC,MAAM,CAACI,QAAP,CAAgBL,IAAhB,CAAP;AACD;;AACD,WAASM,MAAT,CAAgBC,WAAhB,EAA6BC,OAA7B,EAAsC;AACpC,WACE,CAAC,CAACD,WAAF,IAAiB,CAAC,CAACC,OAAnB,IAA8BD,WAAW,CAACE,aAAZ,KAA8BC,SAD9D;AAGD;;AACD,SAAO;AACLhB,IAAAA,MADK;AAELK,IAAAA,MAFK;AAGLK,IAAAA,KAHK;AAILD,IAAAA,QAJK;AAKLG,IAAAA;AALK,GAAP;AAOD;;AACDhB,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nfunction makeConverter(TYPE_BYTE) {\n  function decode(keyVal) {\n    if (keyVal.key[0] !== TYPE_BYTE) {\n      throw new Error(\n        'Decode Error: could not decode witnessScript with key 0x' +\n          keyVal.key.toString('hex'),\n      );\n    }\n    return keyVal.value;\n  }\n  function encode(data) {\n    const key = Buffer.from([TYPE_BYTE]);\n    return {\n      key,\n      value: data,\n    };\n  }\n  const expected = 'Buffer';\n  function check(data) {\n    return Buffer.isBuffer(data);\n  }\n  function canAdd(currentData, newData) {\n    return (\n      !!currentData && !!newData && currentData.witnessScript === undefined\n    );\n  }\n  return {\n    decode,\n    encode,\n    check,\n    expected,\n    canAdd,\n  };\n}\nexports.makeConverter = makeConverter;\n"]},"metadata":{},"sourceType":"script"}