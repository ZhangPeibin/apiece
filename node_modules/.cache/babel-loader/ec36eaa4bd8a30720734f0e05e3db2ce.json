{"ast":null,"code":"import * as bip39 from \"bip39\";\nimport { pbkdf2Sync } from \"crypto\";\nimport { PrivateKey } from '@textile/hub';\n/**\n * 创建助词器\n */\n\nfunction createMnemonic() {\n  var bip39Mnemonic = bip39.generateMnemonic();\n  console.log(\"mnemonic:\" + bip39Mnemonic);\n  return bip39Mnemonic;\n}\n\nfunction createSeedByMnemonic(mnemonic) {\n  const seed = pbkdf2Sync(mnemonic, 'salt', 1024, 32, 'sha512');\n  return seed;\n}\n\nasync function getLocalUserIdentity() {\n  var localUserIdentity = localStorage.getItem(\"private.user.identity\");\n\n  if (localUserIdentity == null) {\n    return null;\n  }\n\n  return localUserIdentity;\n}\n\nasync function getIdentity() {\n  try {\n    var storedIdent = localStorage.getItem(\"pirvate.identity\");\n\n    if (storedIdent === null) {\n      throw new Error('No identity');\n    }\n\n    const restored = PrivateKey.fromString(storedIdent);\n    return restored;\n  } catch (e) {\n    /**\n     * If any error, create a new identity.\n     */\n    try {\n      // const identity = PrivateKey.fromRandom()\n      const identity = new PrivateKey(createSeedByMnemonic(createMnemonic()), 'ed25519');\n      const identityString = identity.toString();\n      console.log(identityString);\n      localStorage.setItem(\"identity\", identityString);\n      return identity;\n    } catch (err) {\n      return err.message;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/src/user/user.ts"],"names":["bip39","pbkdf2Sync","PrivateKey","createMnemonic","bip39Mnemonic","generateMnemonic","console","log","createSeedByMnemonic","mnemonic","seed","getLocalUserIdentity","localUserIdentity","localStorage","getItem","getIdentity","storedIdent","Error","restored","fromString","e","identity","identityString","toString","setItem","err","message"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,UAAR,QAAyB,QAAzB;AACA,SAA2CC,UAA3C,QAAiF,cAAjF;AACA;AACA;AACA;;AACA,SAASC,cAAT,GAA0B;AACtB,MAAIC,aAAa,GAAGJ,KAAK,CAACK,gBAAN,EAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAYH,aAAxB;AACA,SAAOA,aAAP;AACH;;AAED,SAASI,oBAAT,CAA8BC,QAA9B,EAA+C;AAC3C,QAAMC,IAAI,GAAET,UAAU,CAACQ,QAAD,EAAW,MAAX,EAAmB,IAAnB,EAAyB,EAAzB,EAA6B,QAA7B,CAAtB;AACA,SAAOC,IAAP;AACH;;AACD,eAAgBC,oBAAhB,GAAsC;AAClC,MAAIC,iBAAiB,GAAGC,YAAY,CAACC,OAAb,CAAqB,uBAArB,CAAxB;;AACA,MAAIF,iBAAiB,IAAE,IAAvB,EAA4B;AACxB,WAAO,IAAP;AACH;;AACD,SAAOA,iBAAP;AACH;;AAED,eAAeG,WAAf,GAA8B;AAC1B,MAAI;AACA,QAAIC,WAAW,GAAGH,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAAlB;;AACA,QAAIE,WAAW,KAAK,IAApB,EAA0B;AACtB,YAAM,IAAIC,KAAJ,CAAU,aAAV,CAAN;AACH;;AACD,UAAMC,QAAQ,GAAGhB,UAAU,CAACiB,UAAX,CAAsBH,WAAtB,CAAjB;AACA,WAAOE,QAAP;AACH,GAPD,CAQA,OAAOE,CAAP,EAAU;AACN;AACR;AACA;AACQ,QAAI;AACA;AACA,YAAMC,QAAQ,GAAG,IAAInB,UAAJ,CAAeM,oBAAoB,CAACL,cAAc,EAAf,CAAnC,EAAsD,SAAtD,CAAjB;AACA,YAAMmB,cAAc,GAAGD,QAAQ,CAACE,QAAT,EAAvB;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAYe,cAAZ;AACAT,MAAAA,YAAY,CAACW,OAAb,CAAqB,UAArB,EAAgCF,cAAhC;AACA,aAAOD,QAAP;AACH,KAPD,CAOE,OAAOI,GAAP,EAAY;AACV,aAAOA,GAAG,CAACC,OAAX;AACH;AACJ;AACJ","sourcesContent":["import * as bip39 from \"bip39\";\nimport {pbkdf2Sync} from \"crypto\";\nimport { Buckets, PushPathResult, KeyInfo, PrivateKey, WithKeyInfoOptions } from '@textile/hub'\n/**\n * 创建助词器\n */\nfunction createMnemonic() {\n    var bip39Mnemonic = bip39.generateMnemonic();\n    console.log(\"mnemonic:\"+bip39Mnemonic)\n    return bip39Mnemonic\n}\n\nfunction createSeedByMnemonic(mnemonic:string) {\n    const seed= pbkdf2Sync(mnemonic, 'salt', 1024, 32, 'sha512')\n    return seed\n}\nasync  function getLocalUserIdentity(){\n    var localUserIdentity = localStorage.getItem(\"private.user.identity\")\n    if( localUserIdentity==null){\n        return null;\n    }\n    return localUserIdentity\n}\n\nasync function getIdentity()  {\n    try {\n        var storedIdent = localStorage.getItem(\"pirvate.identity\")\n        if (storedIdent === null) {\n            throw new Error('No identity')\n        }\n        const restored = PrivateKey.fromString(storedIdent)\n        return restored\n    }\n    catch (e) {\n        /**\n         * If any error, create a new identity.\n         */\n        try {\n            // const identity = PrivateKey.fromRandom()\n            const identity = new PrivateKey(createSeedByMnemonic(createMnemonic()),'ed25519')\n            const identityString = identity.toString()\n            console.log(identityString)\n            localStorage.setItem(\"identity\",identityString)\n            return identity\n        } catch (err) {\n            return err.message\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}