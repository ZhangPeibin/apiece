{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst bcrypto = require('../crypto');\n\nconst networks_1 = require('../networks');\n\nconst bscript = require('../script');\n\nconst lazy = require('./lazy');\n\nconst typef = require('typeforce');\n\nconst OPS = bscript.OPS;\n\nconst ecc = require('tiny-secp256k1');\n\nconst bech32 = require('bech32');\n\nconst EMPTY_BUFFER = Buffer.alloc(0);\n\nfunction stacksEqual(a, b) {\n  if (a.length !== b.length) return false;\n  return a.every((x, i) => {\n    return x.equals(b[i]);\n  });\n}\n\nfunction chunkHasUncompressedPubkey(chunk) {\n  if (Buffer.isBuffer(chunk) && chunk.length === 65 && chunk[0] === 0x04 && ecc.isPoint(chunk)) {\n    return true;\n  } else {\n    return false;\n  }\n} // input: <>\n// witness: [redeemScriptSig ...] {redeemScript}\n// output: OP_0 {sha256(redeemScript)}\n\n\nfunction p2wsh(a, opts) {\n  if (!a.address && !a.hash && !a.output && !a.redeem && !a.witness) throw new TypeError('Not enough data');\n  opts = Object.assign({\n    validate: true\n  }, opts || {});\n  typef({\n    network: typef.maybe(typef.Object),\n    address: typef.maybe(typef.String),\n    hash: typef.maybe(typef.BufferN(32)),\n    output: typef.maybe(typef.BufferN(34)),\n    redeem: typef.maybe({\n      input: typef.maybe(typef.Buffer),\n      network: typef.maybe(typef.Object),\n      output: typef.maybe(typef.Buffer),\n      witness: typef.maybe(typef.arrayOf(typef.Buffer))\n    }),\n    input: typef.maybe(typef.BufferN(0)),\n    witness: typef.maybe(typef.arrayOf(typef.Buffer))\n  }, a);\n\n  const _address = lazy.value(() => {\n    const result = bech32.decode(a.address);\n    const version = result.words.shift();\n    const data = bech32.fromWords(result.words);\n    return {\n      version,\n      prefix: result.prefix,\n      data: Buffer.from(data)\n    };\n  });\n\n  const _rchunks = lazy.value(() => {\n    return bscript.decompile(a.redeem.input);\n  });\n\n  let network = a.network;\n\n  if (!network) {\n    network = a.redeem && a.redeem.network || networks_1.bitcoin;\n  }\n\n  const o = {\n    network\n  };\n  lazy.prop(o, 'address', () => {\n    if (!o.hash) return;\n    const words = bech32.toWords(o.hash);\n    words.unshift(0x00);\n    return bech32.encode(network.bech32, words);\n  });\n  lazy.prop(o, 'hash', () => {\n    if (a.output) return a.output.slice(2);\n    if (a.address) return _address().data;\n    if (o.redeem && o.redeem.output) return bcrypto.sha256(o.redeem.output);\n  });\n  lazy.prop(o, 'output', () => {\n    if (!o.hash) return;\n    return bscript.compile([OPS.OP_0, o.hash]);\n  });\n  lazy.prop(o, 'redeem', () => {\n    if (!a.witness) return;\n    return {\n      output: a.witness[a.witness.length - 1],\n      input: EMPTY_BUFFER,\n      witness: a.witness.slice(0, -1)\n    };\n  });\n  lazy.prop(o, 'input', () => {\n    if (!o.witness) return;\n    return EMPTY_BUFFER;\n  });\n  lazy.prop(o, 'witness', () => {\n    // transform redeem input to witness stack?\n    if (a.redeem && a.redeem.input && a.redeem.input.length > 0 && a.redeem.output && a.redeem.output.length > 0) {\n      const stack = bscript.toStack(_rchunks()); // assign, and blank the existing input\n\n      o.redeem = Object.assign({\n        witness: stack\n      }, a.redeem);\n      o.redeem.input = EMPTY_BUFFER;\n      return [].concat(stack, a.redeem.output);\n    }\n\n    if (!a.redeem) return;\n    if (!a.redeem.output) return;\n    if (!a.redeem.witness) return;\n    return [].concat(a.redeem.witness, a.redeem.output);\n  });\n  lazy.prop(o, 'name', () => {\n    const nameParts = ['p2wsh'];\n    if (o.redeem !== undefined) nameParts.push(o.redeem.name);\n    return nameParts.join('-');\n  }); // extended validation\n\n  if (opts.validate) {\n    let hash = Buffer.from([]);\n\n    if (a.address) {\n      if (_address().prefix !== network.bech32) throw new TypeError('Invalid prefix or Network mismatch');\n      if (_address().version !== 0x00) throw new TypeError('Invalid address version');\n      if (_address().data.length !== 32) throw new TypeError('Invalid address data');\n      hash = _address().data;\n    }\n\n    if (a.hash) {\n      if (hash.length > 0 && !hash.equals(a.hash)) throw new TypeError('Hash mismatch');else hash = a.hash;\n    }\n\n    if (a.output) {\n      if (a.output.length !== 34 || a.output[0] !== OPS.OP_0 || a.output[1] !== 0x20) throw new TypeError('Output is invalid');\n      const hash2 = a.output.slice(2);\n      if (hash.length > 0 && !hash.equals(hash2)) throw new TypeError('Hash mismatch');else hash = hash2;\n    }\n\n    if (a.redeem) {\n      if (a.redeem.network && a.redeem.network !== network) throw new TypeError('Network mismatch'); // is there two redeem sources?\n\n      if (a.redeem.input && a.redeem.input.length > 0 && a.redeem.witness && a.redeem.witness.length > 0) throw new TypeError('Ambiguous witness source'); // is the redeem output non-empty?\n\n      if (a.redeem.output) {\n        if (bscript.decompile(a.redeem.output).length === 0) throw new TypeError('Redeem.output is invalid'); // match hash against other sources\n\n        const hash2 = bcrypto.sha256(a.redeem.output);\n        if (hash.length > 0 && !hash.equals(hash2)) throw new TypeError('Hash mismatch');else hash = hash2;\n      }\n\n      if (a.redeem.input && !bscript.isPushOnly(_rchunks())) throw new TypeError('Non push-only scriptSig');\n      if (a.witness && a.redeem.witness && !stacksEqual(a.witness, a.redeem.witness)) throw new TypeError('Witness and redeem.witness mismatch');\n\n      if (a.redeem.input && _rchunks().some(chunkHasUncompressedPubkey) || a.redeem.output && (bscript.decompile(a.redeem.output) || []).some(chunkHasUncompressedPubkey)) {\n        throw new TypeError('redeem.input or redeem.output contains uncompressed pubkey');\n      }\n    }\n\n    if (a.witness && a.witness.length > 0) {\n      const wScript = a.witness[a.witness.length - 1];\n      if (a.redeem && a.redeem.output && !a.redeem.output.equals(wScript)) throw new TypeError('Witness and redeem.output mismatch');\n      if (a.witness.some(chunkHasUncompressedPubkey) || (bscript.decompile(wScript) || []).some(chunkHasUncompressedPubkey)) throw new TypeError('Witness contains uncompressed pubkey');\n    }\n  }\n\n  return Object.assign(o, a);\n}\n\nexports.p2wsh = p2wsh;","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/node_modules/bitcoinjs-lib/src/payments/p2wsh.js"],"names":["Object","defineProperty","exports","value","bcrypto","require","networks_1","bscript","lazy","typef","OPS","ecc","bech32","EMPTY_BUFFER","Buffer","alloc","stacksEqual","a","b","length","every","x","i","equals","chunkHasUncompressedPubkey","chunk","isBuffer","isPoint","p2wsh","opts","address","hash","output","redeem","witness","TypeError","assign","validate","network","maybe","String","BufferN","input","arrayOf","_address","result","decode","version","words","shift","data","fromWords","prefix","from","_rchunks","decompile","bitcoin","o","prop","toWords","unshift","encode","slice","sha256","compile","OP_0","stack","toStack","concat","nameParts","undefined","push","name","join","hash2","isPushOnly","some","wScript"],"mappings":"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","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst bcrypto = require('../crypto');\nconst networks_1 = require('../networks');\nconst bscript = require('../script');\nconst lazy = require('./lazy');\nconst typef = require('typeforce');\nconst OPS = bscript.OPS;\nconst ecc = require('tiny-secp256k1');\nconst bech32 = require('bech32');\nconst EMPTY_BUFFER = Buffer.alloc(0);\nfunction stacksEqual(a, b) {\n  if (a.length !== b.length) return false;\n  return a.every((x, i) => {\n    return x.equals(b[i]);\n  });\n}\nfunction chunkHasUncompressedPubkey(chunk) {\n  if (\n    Buffer.isBuffer(chunk) &&\n    chunk.length === 65 &&\n    chunk[0] === 0x04 &&\n    ecc.isPoint(chunk)\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// input: <>\n// witness: [redeemScriptSig ...] {redeemScript}\n// output: OP_0 {sha256(redeemScript)}\nfunction p2wsh(a, opts) {\n  if (!a.address && !a.hash && !a.output && !a.redeem && !a.witness)\n    throw new TypeError('Not enough data');\n  opts = Object.assign({ validate: true }, opts || {});\n  typef(\n    {\n      network: typef.maybe(typef.Object),\n      address: typef.maybe(typef.String),\n      hash: typef.maybe(typef.BufferN(32)),\n      output: typef.maybe(typef.BufferN(34)),\n      redeem: typef.maybe({\n        input: typef.maybe(typef.Buffer),\n        network: typef.maybe(typef.Object),\n        output: typef.maybe(typef.Buffer),\n        witness: typef.maybe(typef.arrayOf(typef.Buffer)),\n      }),\n      input: typef.maybe(typef.BufferN(0)),\n      witness: typef.maybe(typef.arrayOf(typef.Buffer)),\n    },\n    a,\n  );\n  const _address = lazy.value(() => {\n    const result = bech32.decode(a.address);\n    const version = result.words.shift();\n    const data = bech32.fromWords(result.words);\n    return {\n      version,\n      prefix: result.prefix,\n      data: Buffer.from(data),\n    };\n  });\n  const _rchunks = lazy.value(() => {\n    return bscript.decompile(a.redeem.input);\n  });\n  let network = a.network;\n  if (!network) {\n    network = (a.redeem && a.redeem.network) || networks_1.bitcoin;\n  }\n  const o = { network };\n  lazy.prop(o, 'address', () => {\n    if (!o.hash) return;\n    const words = bech32.toWords(o.hash);\n    words.unshift(0x00);\n    return bech32.encode(network.bech32, words);\n  });\n  lazy.prop(o, 'hash', () => {\n    if (a.output) return a.output.slice(2);\n    if (a.address) return _address().data;\n    if (o.redeem && o.redeem.output) return bcrypto.sha256(o.redeem.output);\n  });\n  lazy.prop(o, 'output', () => {\n    if (!o.hash) return;\n    return bscript.compile([OPS.OP_0, o.hash]);\n  });\n  lazy.prop(o, 'redeem', () => {\n    if (!a.witness) return;\n    return {\n      output: a.witness[a.witness.length - 1],\n      input: EMPTY_BUFFER,\n      witness: a.witness.slice(0, -1),\n    };\n  });\n  lazy.prop(o, 'input', () => {\n    if (!o.witness) return;\n    return EMPTY_BUFFER;\n  });\n  lazy.prop(o, 'witness', () => {\n    // transform redeem input to witness stack?\n    if (\n      a.redeem &&\n      a.redeem.input &&\n      a.redeem.input.length > 0 &&\n      a.redeem.output &&\n      a.redeem.output.length > 0\n    ) {\n      const stack = bscript.toStack(_rchunks());\n      // assign, and blank the existing input\n      o.redeem = Object.assign({ witness: stack }, a.redeem);\n      o.redeem.input = EMPTY_BUFFER;\n      return [].concat(stack, a.redeem.output);\n    }\n    if (!a.redeem) return;\n    if (!a.redeem.output) return;\n    if (!a.redeem.witness) return;\n    return [].concat(a.redeem.witness, a.redeem.output);\n  });\n  lazy.prop(o, 'name', () => {\n    const nameParts = ['p2wsh'];\n    if (o.redeem !== undefined) nameParts.push(o.redeem.name);\n    return nameParts.join('-');\n  });\n  // extended validation\n  if (opts.validate) {\n    let hash = Buffer.from([]);\n    if (a.address) {\n      if (_address().prefix !== network.bech32)\n        throw new TypeError('Invalid prefix or Network mismatch');\n      if (_address().version !== 0x00)\n        throw new TypeError('Invalid address version');\n      if (_address().data.length !== 32)\n        throw new TypeError('Invalid address data');\n      hash = _address().data;\n    }\n    if (a.hash) {\n      if (hash.length > 0 && !hash.equals(a.hash))\n        throw new TypeError('Hash mismatch');\n      else hash = a.hash;\n    }\n    if (a.output) {\n      if (\n        a.output.length !== 34 ||\n        a.output[0] !== OPS.OP_0 ||\n        a.output[1] !== 0x20\n      )\n        throw new TypeError('Output is invalid');\n      const hash2 = a.output.slice(2);\n      if (hash.length > 0 && !hash.equals(hash2))\n        throw new TypeError('Hash mismatch');\n      else hash = hash2;\n    }\n    if (a.redeem) {\n      if (a.redeem.network && a.redeem.network !== network)\n        throw new TypeError('Network mismatch');\n      // is there two redeem sources?\n      if (\n        a.redeem.input &&\n        a.redeem.input.length > 0 &&\n        a.redeem.witness &&\n        a.redeem.witness.length > 0\n      )\n        throw new TypeError('Ambiguous witness source');\n      // is the redeem output non-empty?\n      if (a.redeem.output) {\n        if (bscript.decompile(a.redeem.output).length === 0)\n          throw new TypeError('Redeem.output is invalid');\n        // match hash against other sources\n        const hash2 = bcrypto.sha256(a.redeem.output);\n        if (hash.length > 0 && !hash.equals(hash2))\n          throw new TypeError('Hash mismatch');\n        else hash = hash2;\n      }\n      if (a.redeem.input && !bscript.isPushOnly(_rchunks()))\n        throw new TypeError('Non push-only scriptSig');\n      if (\n        a.witness &&\n        a.redeem.witness &&\n        !stacksEqual(a.witness, a.redeem.witness)\n      )\n        throw new TypeError('Witness and redeem.witness mismatch');\n      if (\n        (a.redeem.input && _rchunks().some(chunkHasUncompressedPubkey)) ||\n        (a.redeem.output &&\n          (bscript.decompile(a.redeem.output) || []).some(\n            chunkHasUncompressedPubkey,\n          ))\n      ) {\n        throw new TypeError(\n          'redeem.input or redeem.output contains uncompressed pubkey',\n        );\n      }\n    }\n    if (a.witness && a.witness.length > 0) {\n      const wScript = a.witness[a.witness.length - 1];\n      if (a.redeem && a.redeem.output && !a.redeem.output.equals(wScript))\n        throw new TypeError('Witness and redeem.output mismatch');\n      if (\n        a.witness.some(chunkHasUncompressedPubkey) ||\n        (bscript.decompile(wScript) || []).some(chunkHasUncompressedPubkey)\n      )\n        throw new TypeError('Witness contains uncompressed pubkey');\n    }\n  }\n  return Object.assign(o, a);\n}\nexports.p2wsh = p2wsh;\n"]},"metadata":{},"sourceType":"script"}