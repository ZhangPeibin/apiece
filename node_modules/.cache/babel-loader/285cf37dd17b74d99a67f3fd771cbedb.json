{"ast":null,"code":"import * as bip39 from \"bip39\";\nimport { pbkdf2Sync } from \"crypto\";\nimport { PrivateKey } from '@textile/hub';\n/**\n * 创建助词器\n */\n\nexport function createMnemonic() {\n  var bip39Mnemonic = bip39.generateMnemonic();\n  console.log(\"mnemonic:\" + bip39Mnemonic);\n  return bip39Mnemonic;\n}\nexport function createSeedByMnemonic(mnemonic) {\n  const seed = pbkdf2Sync(mnemonic, 'salt', 1024, 32, 'sha512');\n  return seed;\n}\nexport function userIdentityFromSeed(seed) {\n  const identity = new PrivateKey(seed, 'ed25519');\n  return identity;\n}\nexport async function getLocalUserIdentity() {\n  const localUserIdentity = localStorage.getItem(\"private.user.identity\");\n\n  if (localUserIdentity == null) {\n    return null;\n  }\n\n  return localUserIdentity;\n}\nexport function saveLocalUserIdentity(userIdentity) {\n  localStorage.setItem(\"private.user.identity\", userIdentity);\n}\n\nasync function getIdentity() {\n  try {\n    var storedIdent = localStorage.getItem(\"pirvate.identity\");\n\n    if (storedIdent === null) {\n      throw new Error('No identity');\n    }\n\n    const restored = PrivateKey.fromString(storedIdent);\n    return restored;\n  } catch (e) {\n    /**\n     * If any error, create a new identity.\n     */\n    try {\n      // const identity = PrivateKey.fromRandom()\n      const identity = new PrivateKey(createSeedByMnemonic(createMnemonic()), 'ed25519');\n      const identityString = identity.toString();\n      console.log(identityString);\n      localStorage.setItem(\"identity\", identityString);\n      return identity;\n    } catch (err) {\n      return err.message;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/src/common/user.js"],"names":["bip39","pbkdf2Sync","PrivateKey","createMnemonic","bip39Mnemonic","generateMnemonic","console","log","createSeedByMnemonic","mnemonic","seed","userIdentityFromSeed","identity","getLocalUserIdentity","localUserIdentity","localStorage","getItem","saveLocalUserIdentity","userIdentity","setItem","getIdentity","storedIdent","Error","restored","fromString","e","identityString","toString","err","message"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,UAAR,QAAyB,QAAzB;AACA,SAAQC,UAAR,QAAyB,cAAzB;AAEA;AACA;AACA;;AACA,OAAU,SAASC,cAAT,GAA0B;AAChC,MAAIC,aAAa,GAAGJ,KAAK,CAACK,gBAAN,EAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAYH,aAAxB;AACA,SAAOA,aAAP;AACH;AAED,OAAO,SAASI,oBAAT,CAA8BC,QAA9B,EAAwC;AAC3C,QAAMC,IAAI,GAAET,UAAU,CAACQ,QAAD,EAAW,MAAX,EAAmB,IAAnB,EAAyB,EAAzB,EAA6B,QAA7B,CAAtB;AACA,SAAOC,IAAP;AACH;AAED,OAAQ,SAASC,oBAAT,CAA8BD,IAA9B,EAAmC;AACvC,QAAME,QAAQ,GAAG,IAAIV,UAAJ,CAAeQ,IAAf,EAAoB,SAApB,CAAjB;AACA,SAAOE,QAAP;AACH;AAED,OAAO,eAAgBC,oBAAhB,GAAsC;AACzC,QAAMC,iBAAiB,GAAGC,YAAY,CAACC,OAAb,CAAqB,uBAArB,CAA1B;;AACA,MAAIF,iBAAiB,IAAE,IAAvB,EAA4B;AACxB,WAAO,IAAP;AACH;;AACD,SAAOA,iBAAP;AACH;AAED,OAAO,SAASG,qBAAT,CAA+BC,YAA/B,EAA4C;AAC/CH,EAAAA,YAAY,CAACI,OAAb,CAAqB,uBAArB,EAA8CD,YAA9C;AACH;;AAED,eAAeE,WAAf,GAA8B;AAC1B,MAAI;AACA,QAAIC,WAAW,GAAGN,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAAlB;;AACA,QAAIK,WAAW,KAAK,IAApB,EAA0B;AACtB,YAAM,IAAIC,KAAJ,CAAU,aAAV,CAAN;AACH;;AACD,UAAMC,QAAQ,GAAGrB,UAAU,CAACsB,UAAX,CAAsBH,WAAtB,CAAjB;AACA,WAAOE,QAAP;AACH,GAPD,CAQA,OAAOE,CAAP,EAAU;AACN;AACR;AACA;AACQ,QAAI;AACA;AACA,YAAMb,QAAQ,GAAG,IAAIV,UAAJ,CAAeM,oBAAoB,CAACL,cAAc,EAAf,CAAnC,EAAsD,SAAtD,CAAjB;AACA,YAAMuB,cAAc,GAAGd,QAAQ,CAACe,QAAT,EAAvB;AACArB,MAAAA,OAAO,CAACC,GAAR,CAAYmB,cAAZ;AACAX,MAAAA,YAAY,CAACI,OAAb,CAAqB,UAArB,EAAgCO,cAAhC;AACA,aAAOd,QAAP;AACH,KAPD,CAOE,OAAOgB,GAAP,EAAY;AACV,aAAOA,GAAG,CAACC,OAAX;AACH;AACJ;AACJ","sourcesContent":["import * as bip39 from \"bip39\";\nimport {pbkdf2Sync} from \"crypto\";\nimport {PrivateKey} from '@textile/hub'\n\n/**\n * 创建助词器\n */\nexport    function createMnemonic() {\n    var bip39Mnemonic = bip39.generateMnemonic();\n    console.log(\"mnemonic:\"+bip39Mnemonic)\n    return bip39Mnemonic\n}\n\nexport function createSeedByMnemonic(mnemonic) {\n    const seed= pbkdf2Sync(mnemonic, 'salt', 1024, 32, 'sha512');\n    return seed\n}\n\nexport  function userIdentityFromSeed(seed){\n    const identity = new PrivateKey(seed,'ed25519');\n    return identity;\n}\n\nexport async  function getLocalUserIdentity(){\n    const localUserIdentity = localStorage.getItem(\"private.user.identity\");\n    if( localUserIdentity==null){\n        return null;\n    }\n    return localUserIdentity\n}\n\nexport function saveLocalUserIdentity(userIdentity){\n    localStorage.setItem(\"private.user.identity\", userIdentity);\n}\n\nasync function getIdentity()  {\n    try {\n        var storedIdent = localStorage.getItem(\"pirvate.identity\");\n        if (storedIdent === null) {\n            throw new Error('No identity')\n        }\n        const restored = PrivateKey.fromString(storedIdent);\n        return restored\n    }\n    catch (e) {\n        /**\n         * If any error, create a new identity.\n         */\n        try {\n            // const identity = PrivateKey.fromRandom()\n            const identity = new PrivateKey(createSeedByMnemonic(createMnemonic()),'ed25519')\n            const identityString = identity.toString();\n            console.log(identityString);\n            localStorage.setItem(\"identity\",identityString);\n            return identity\n        } catch (err) {\n            return err.message\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}