{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst types = require('./types');\n\nconst typeforce = require('typeforce');\n\nconst varuint = require('varuint-bitcoin'); // https://github.com/feross/buffer/blob/master/index.js#L1127\n\n\nfunction verifuint(value, max) {\n  if (typeof value !== 'number') throw new Error('cannot write a non-number as a number');\n  if (value < 0) throw new Error('specified a negative value for writing an unsigned value');\n  if (value > max) throw new Error('RangeError: value out of range');\n  if (Math.floor(value) !== value) throw new Error('value has a fractional component');\n}\n\nfunction readUInt64LE(buffer, offset) {\n  const a = buffer.readUInt32LE(offset);\n  let b = buffer.readUInt32LE(offset + 4);\n  b *= 0x100000000;\n  verifuint(b + a, 0x001fffffffffffff);\n  return b + a;\n}\n\nexports.readUInt64LE = readUInt64LE;\n\nfunction writeUInt64LE(buffer, value, offset) {\n  verifuint(value, 0x001fffffffffffff);\n  buffer.writeInt32LE(value & -1, offset);\n  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);\n  return offset + 8;\n}\n\nexports.writeUInt64LE = writeUInt64LE;\n\nfunction reverseBuffer(buffer) {\n  if (buffer.length < 1) return buffer;\n  let j = buffer.length - 1;\n  let tmp = 0;\n\n  for (let i = 0; i < buffer.length / 2; i++) {\n    tmp = buffer[i];\n    buffer[i] = buffer[j];\n    buffer[j] = tmp;\n    j--;\n  }\n\n  return buffer;\n}\n\nexports.reverseBuffer = reverseBuffer;\n\nfunction cloneBuffer(buffer) {\n  const clone = Buffer.allocUnsafe(buffer.length);\n  buffer.copy(clone);\n  return clone;\n}\n\nexports.cloneBuffer = cloneBuffer;\n/**\n * Helper class for serialization of bitcoin data types into a pre-allocated buffer.\n */\n\nclass BufferWriter {\n  constructor(buffer, offset = 0) {\n    this.buffer = buffer;\n    this.offset = offset;\n    typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);\n  }\n\n  writeUInt8(i) {\n    this.offset = this.buffer.writeUInt8(i, this.offset);\n  }\n\n  writeInt32(i) {\n    this.offset = this.buffer.writeInt32LE(i, this.offset);\n  }\n\n  writeUInt32(i) {\n    this.offset = this.buffer.writeUInt32LE(i, this.offset);\n  }\n\n  writeUInt64(i) {\n    this.offset = writeUInt64LE(this.buffer, i, this.offset);\n  }\n\n  writeVarInt(i) {\n    varuint.encode(i, this.buffer, this.offset);\n    this.offset += varuint.encode.bytes;\n  }\n\n  writeSlice(slice) {\n    if (this.buffer.length < this.offset + slice.length) {\n      throw new Error('Cannot write slice out of bounds');\n    }\n\n    this.offset += slice.copy(this.buffer, this.offset);\n  }\n\n  writeVarSlice(slice) {\n    this.writeVarInt(slice.length);\n    this.writeSlice(slice);\n  }\n\n  writeVector(vector) {\n    this.writeVarInt(vector.length);\n    vector.forEach(buf => this.writeVarSlice(buf));\n  }\n\n}\n\nexports.BufferWriter = BufferWriter;\n/**\n * Helper class for reading of bitcoin data types from a buffer.\n */\n\nclass BufferReader {\n  constructor(buffer, offset = 0) {\n    this.buffer = buffer;\n    this.offset = offset;\n    typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);\n  }\n\n  readUInt8() {\n    const result = this.buffer.readUInt8(this.offset);\n    this.offset++;\n    return result;\n  }\n\n  readInt32() {\n    const result = this.buffer.readInt32LE(this.offset);\n    this.offset += 4;\n    return result;\n  }\n\n  readUInt32() {\n    const result = this.buffer.readUInt32LE(this.offset);\n    this.offset += 4;\n    return result;\n  }\n\n  readUInt64() {\n    const result = readUInt64LE(this.buffer, this.offset);\n    this.offset += 8;\n    return result;\n  }\n\n  readVarInt() {\n    const vi = varuint.decode(this.buffer, this.offset);\n    this.offset += varuint.decode.bytes;\n    return vi;\n  }\n\n  readSlice(n) {\n    if (this.buffer.length < this.offset + n) {\n      throw new Error('Cannot read slice out of bounds');\n    }\n\n    const result = this.buffer.slice(this.offset, this.offset + n);\n    this.offset += n;\n    return result;\n  }\n\n  readVarSlice() {\n    return this.readSlice(this.readVarInt());\n  }\n\n  readVector() {\n    const count = this.readVarInt();\n    const vector = [];\n\n    for (let i = 0; i < count; i++) vector.push(this.readVarSlice());\n\n    return vector;\n  }\n\n}\n\nexports.BufferReader = BufferReader;","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/node_modules/bitcoinjs-lib/src/bufferutils.js"],"names":["Object","defineProperty","exports","value","types","require","typeforce","varuint","verifuint","max","Error","Math","floor","readUInt64LE","buffer","offset","a","readUInt32LE","b","writeUInt64LE","writeInt32LE","writeUInt32LE","reverseBuffer","length","j","tmp","i","cloneBuffer","clone","Buffer","allocUnsafe","copy","BufferWriter","constructor","tuple","UInt32","writeUInt8","writeInt32","writeUInt32","writeUInt64","writeVarInt","encode","bytes","writeSlice","slice","writeVarSlice","writeVector","vector","forEach","buf","BufferReader","readUInt8","result","readInt32","readInt32LE","readUInt32","readUInt64","readVarInt","vi","decode","readSlice","n","readVarSlice","readVector","count","push"],"mappings":"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","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst types = require('./types');\nconst typeforce = require('typeforce');\nconst varuint = require('varuint-bitcoin');\n// https://github.com/feross/buffer/blob/master/index.js#L1127\nfunction verifuint(value, max) {\n  if (typeof value !== 'number')\n    throw new Error('cannot write a non-number as a number');\n  if (value < 0)\n    throw new Error('specified a negative value for writing an unsigned value');\n  if (value > max) throw new Error('RangeError: value out of range');\n  if (Math.floor(value) !== value)\n    throw new Error('value has a fractional component');\n}\nfunction readUInt64LE(buffer, offset) {\n  const a = buffer.readUInt32LE(offset);\n  let b = buffer.readUInt32LE(offset + 4);\n  b *= 0x100000000;\n  verifuint(b + a, 0x001fffffffffffff);\n  return b + a;\n}\nexports.readUInt64LE = readUInt64LE;\nfunction writeUInt64LE(buffer, value, offset) {\n  verifuint(value, 0x001fffffffffffff);\n  buffer.writeInt32LE(value & -1, offset);\n  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);\n  return offset + 8;\n}\nexports.writeUInt64LE = writeUInt64LE;\nfunction reverseBuffer(buffer) {\n  if (buffer.length < 1) return buffer;\n  let j = buffer.length - 1;\n  let tmp = 0;\n  for (let i = 0; i < buffer.length / 2; i++) {\n    tmp = buffer[i];\n    buffer[i] = buffer[j];\n    buffer[j] = tmp;\n    j--;\n  }\n  return buffer;\n}\nexports.reverseBuffer = reverseBuffer;\nfunction cloneBuffer(buffer) {\n  const clone = Buffer.allocUnsafe(buffer.length);\n  buffer.copy(clone);\n  return clone;\n}\nexports.cloneBuffer = cloneBuffer;\n/**\n * Helper class for serialization of bitcoin data types into a pre-allocated buffer.\n */\nclass BufferWriter {\n  constructor(buffer, offset = 0) {\n    this.buffer = buffer;\n    this.offset = offset;\n    typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);\n  }\n  writeUInt8(i) {\n    this.offset = this.buffer.writeUInt8(i, this.offset);\n  }\n  writeInt32(i) {\n    this.offset = this.buffer.writeInt32LE(i, this.offset);\n  }\n  writeUInt32(i) {\n    this.offset = this.buffer.writeUInt32LE(i, this.offset);\n  }\n  writeUInt64(i) {\n    this.offset = writeUInt64LE(this.buffer, i, this.offset);\n  }\n  writeVarInt(i) {\n    varuint.encode(i, this.buffer, this.offset);\n    this.offset += varuint.encode.bytes;\n  }\n  writeSlice(slice) {\n    if (this.buffer.length < this.offset + slice.length) {\n      throw new Error('Cannot write slice out of bounds');\n    }\n    this.offset += slice.copy(this.buffer, this.offset);\n  }\n  writeVarSlice(slice) {\n    this.writeVarInt(slice.length);\n    this.writeSlice(slice);\n  }\n  writeVector(vector) {\n    this.writeVarInt(vector.length);\n    vector.forEach(buf => this.writeVarSlice(buf));\n  }\n}\nexports.BufferWriter = BufferWriter;\n/**\n * Helper class for reading of bitcoin data types from a buffer.\n */\nclass BufferReader {\n  constructor(buffer, offset = 0) {\n    this.buffer = buffer;\n    this.offset = offset;\n    typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);\n  }\n  readUInt8() {\n    const result = this.buffer.readUInt8(this.offset);\n    this.offset++;\n    return result;\n  }\n  readInt32() {\n    const result = this.buffer.readInt32LE(this.offset);\n    this.offset += 4;\n    return result;\n  }\n  readUInt32() {\n    const result = this.buffer.readUInt32LE(this.offset);\n    this.offset += 4;\n    return result;\n  }\n  readUInt64() {\n    const result = readUInt64LE(this.buffer, this.offset);\n    this.offset += 8;\n    return result;\n  }\n  readVarInt() {\n    const vi = varuint.decode(this.buffer, this.offset);\n    this.offset += varuint.decode.bytes;\n    return vi;\n  }\n  readSlice(n) {\n    if (this.buffer.length < this.offset + n) {\n      throw new Error('Cannot read slice out of bounds');\n    }\n    const result = this.buffer.slice(this.offset, this.offset + n);\n    this.offset += n;\n    return result;\n  }\n  readVarSlice() {\n    return this.readSlice(this.readVarInt());\n  }\n  readVector() {\n    const count = this.readVarInt();\n    const vector = [];\n    for (let i = 0; i < count; i++) vector.push(this.readVarSlice());\n    return vector;\n  }\n}\nexports.BufferReader = BufferReader;\n"]},"metadata":{},"sourceType":"script"}