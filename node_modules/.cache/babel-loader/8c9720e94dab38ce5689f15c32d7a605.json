{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst script_1 = require('./script');\n\nconst multisig = require('./templates/multisig');\n\nconst nullData = require('./templates/nulldata');\n\nconst pubKey = require('./templates/pubkey');\n\nconst pubKeyHash = require('./templates/pubkeyhash');\n\nconst scriptHash = require('./templates/scripthash');\n\nconst witnessCommitment = require('./templates/witnesscommitment');\n\nconst witnessPubKeyHash = require('./templates/witnesspubkeyhash');\n\nconst witnessScriptHash = require('./templates/witnessscripthash');\n\nconst types = {\n  P2MS: 'multisig',\n  NONSTANDARD: 'nonstandard',\n  NULLDATA: 'nulldata',\n  P2PK: 'pubkey',\n  P2PKH: 'pubkeyhash',\n  P2SH: 'scripthash',\n  P2WPKH: 'witnesspubkeyhash',\n  P2WSH: 'witnessscripthash',\n  WITNESS_COMMITMENT: 'witnesscommitment'\n};\nexports.types = types;\n\nfunction classifyOutput(script) {\n  if (witnessPubKeyHash.output.check(script)) return types.P2WPKH;\n  if (witnessScriptHash.output.check(script)) return types.P2WSH;\n  if (pubKeyHash.output.check(script)) return types.P2PKH;\n  if (scriptHash.output.check(script)) return types.P2SH; // XXX: optimization, below functions .decompile before use\n\n  const chunks = script_1.decompile(script);\n  if (!chunks) throw new TypeError('Invalid script');\n  if (multisig.output.check(chunks)) return types.P2MS;\n  if (pubKey.output.check(chunks)) return types.P2PK;\n  if (witnessCommitment.output.check(chunks)) return types.WITNESS_COMMITMENT;\n  if (nullData.output.check(chunks)) return types.NULLDATA;\n  return types.NONSTANDARD;\n}\n\nexports.output = classifyOutput;\n\nfunction classifyInput(script, allowIncomplete) {\n  // XXX: optimization, below functions .decompile before use\n  const chunks = script_1.decompile(script);\n  if (!chunks) throw new TypeError('Invalid script');\n  if (pubKeyHash.input.check(chunks)) return types.P2PKH;\n  if (scriptHash.input.check(chunks, allowIncomplete)) return types.P2SH;\n  if (multisig.input.check(chunks, allowIncomplete)) return types.P2MS;\n  if (pubKey.input.check(chunks)) return types.P2PK;\n  return types.NONSTANDARD;\n}\n\nexports.input = classifyInput;\n\nfunction classifyWitness(script, allowIncomplete) {\n  // XXX: optimization, below functions .decompile before use\n  const chunks = script_1.decompile(script);\n  if (!chunks) throw new TypeError('Invalid script');\n  if (witnessPubKeyHash.input.check(chunks)) return types.P2WPKH;\n  if (witnessScriptHash.input.check(chunks, allowIncomplete)) return types.P2WSH;\n  return types.NONSTANDARD;\n}\n\nexports.witness = classifyWitness;","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/node_modules/bitcoinjs-lib/src/classify.js"],"names":["Object","defineProperty","exports","value","script_1","require","multisig","nullData","pubKey","pubKeyHash","scriptHash","witnessCommitment","witnessPubKeyHash","witnessScriptHash","types","P2MS","NONSTANDARD","NULLDATA","P2PK","P2PKH","P2SH","P2WPKH","P2WSH","WITNESS_COMMITMENT","classifyOutput","script","output","check","chunks","decompile","TypeError","classifyInput","allowIncomplete","input","classifyWitness","witness"],"mappings":"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","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst script_1 = require('./script');\nconst multisig = require('./templates/multisig');\nconst nullData = require('./templates/nulldata');\nconst pubKey = require('./templates/pubkey');\nconst pubKeyHash = require('./templates/pubkeyhash');\nconst scriptHash = require('./templates/scripthash');\nconst witnessCommitment = require('./templates/witnesscommitment');\nconst witnessPubKeyHash = require('./templates/witnesspubkeyhash');\nconst witnessScriptHash = require('./templates/witnessscripthash');\nconst types = {\n  P2MS: 'multisig',\n  NONSTANDARD: 'nonstandard',\n  NULLDATA: 'nulldata',\n  P2PK: 'pubkey',\n  P2PKH: 'pubkeyhash',\n  P2SH: 'scripthash',\n  P2WPKH: 'witnesspubkeyhash',\n  P2WSH: 'witnessscripthash',\n  WITNESS_COMMITMENT: 'witnesscommitment',\n};\nexports.types = types;\nfunction classifyOutput(script) {\n  if (witnessPubKeyHash.output.check(script)) return types.P2WPKH;\n  if (witnessScriptHash.output.check(script)) return types.P2WSH;\n  if (pubKeyHash.output.check(script)) return types.P2PKH;\n  if (scriptHash.output.check(script)) return types.P2SH;\n  // XXX: optimization, below functions .decompile before use\n  const chunks = script_1.decompile(script);\n  if (!chunks) throw new TypeError('Invalid script');\n  if (multisig.output.check(chunks)) return types.P2MS;\n  if (pubKey.output.check(chunks)) return types.P2PK;\n  if (witnessCommitment.output.check(chunks)) return types.WITNESS_COMMITMENT;\n  if (nullData.output.check(chunks)) return types.NULLDATA;\n  return types.NONSTANDARD;\n}\nexports.output = classifyOutput;\nfunction classifyInput(script, allowIncomplete) {\n  // XXX: optimization, below functions .decompile before use\n  const chunks = script_1.decompile(script);\n  if (!chunks) throw new TypeError('Invalid script');\n  if (pubKeyHash.input.check(chunks)) return types.P2PKH;\n  if (scriptHash.input.check(chunks, allowIncomplete)) return types.P2SH;\n  if (multisig.input.check(chunks, allowIncomplete)) return types.P2MS;\n  if (pubKey.input.check(chunks)) return types.P2PK;\n  return types.NONSTANDARD;\n}\nexports.input = classifyInput;\nfunction classifyWitness(script, allowIncomplete) {\n  // XXX: optimization, below functions .decompile before use\n  const chunks = script_1.decompile(script);\n  if (!chunks) throw new TypeError('Invalid script');\n  if (witnessPubKeyHash.input.check(chunks)) return types.P2WPKH;\n  if (witnessScriptHash.input.check(chunks, allowIncomplete))\n    return types.P2WSH;\n  return types.NONSTANDARD;\n}\nexports.witness = classifyWitness;\n"]},"metadata":{},"sourceType":"script"}