{"ast":null,"code":"'use strict'; // m [pubKeys ...] n OP_CHECKMULTISIG\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst bscript = require('../../script');\n\nconst script_1 = require('../../script');\n\nconst types = require('../../types');\n\nconst OP_INT_BASE = script_1.OPS.OP_RESERVED; // OP_1 - 1\n\nfunction check(script, allowIncomplete) {\n  const chunks = bscript.decompile(script);\n  if (chunks.length < 4) return false;\n  if (chunks[chunks.length - 1] !== script_1.OPS.OP_CHECKMULTISIG) return false;\n  if (!types.Number(chunks[0])) return false;\n  if (!types.Number(chunks[chunks.length - 2])) return false;\n  const m = chunks[0] - OP_INT_BASE;\n  const n = chunks[chunks.length - 2] - OP_INT_BASE;\n  if (m <= 0) return false;\n  if (n > 16) return false;\n  if (m > n) return false;\n  if (n !== chunks.length - 3) return false;\n  if (allowIncomplete) return true;\n  const keys = chunks.slice(1, -2);\n  return keys.every(bscript.isCanonicalPubKey);\n}\n\nexports.check = check;\n\ncheck.toJSON = () => {\n  return 'multi-sig output';\n};","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/node_modules/bitcoinjs-lib/src/templates/multisig/output.js"],"names":["Object","defineProperty","exports","value","bscript","require","script_1","types","OP_INT_BASE","OPS","OP_RESERVED","check","script","allowIncomplete","chunks","decompile","length","OP_CHECKMULTISIG","Number","m","n","keys","slice","every","isCanonicalPubKey","toJSON"],"mappings":"AAAA,a,CACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,cAAD,CAAxB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMG,WAAW,GAAGF,QAAQ,CAACG,GAAT,CAAaC,WAAjC,C,CAA8C;;AAC9C,SAASC,KAAT,CAAeC,MAAf,EAAuBC,eAAvB,EAAwC;AACtC,QAAMC,MAAM,GAAGV,OAAO,CAACW,SAAR,CAAkBH,MAAlB,CAAf;AACA,MAAIE,MAAM,CAACE,MAAP,GAAgB,CAApB,EAAuB,OAAO,KAAP;AACvB,MAAIF,MAAM,CAACA,MAAM,CAACE,MAAP,GAAgB,CAAjB,CAAN,KAA8BV,QAAQ,CAACG,GAAT,CAAaQ,gBAA/C,EAAiE,OAAO,KAAP;AACjE,MAAI,CAACV,KAAK,CAACW,MAAN,CAAaJ,MAAM,CAAC,CAAD,CAAnB,CAAL,EAA8B,OAAO,KAAP;AAC9B,MAAI,CAACP,KAAK,CAACW,MAAN,CAAaJ,MAAM,CAACA,MAAM,CAACE,MAAP,GAAgB,CAAjB,CAAnB,CAAL,EAA8C,OAAO,KAAP;AAC9C,QAAMG,CAAC,GAAGL,MAAM,CAAC,CAAD,CAAN,GAAYN,WAAtB;AACA,QAAMY,CAAC,GAAGN,MAAM,CAACA,MAAM,CAACE,MAAP,GAAgB,CAAjB,CAAN,GAA4BR,WAAtC;AACA,MAAIW,CAAC,IAAI,CAAT,EAAY,OAAO,KAAP;AACZ,MAAIC,CAAC,GAAG,EAAR,EAAY,OAAO,KAAP;AACZ,MAAID,CAAC,GAAGC,CAAR,EAAW,OAAO,KAAP;AACX,MAAIA,CAAC,KAAKN,MAAM,CAACE,MAAP,GAAgB,CAA1B,EAA6B,OAAO,KAAP;AAC7B,MAAIH,eAAJ,EAAqB,OAAO,IAAP;AACrB,QAAMQ,IAAI,GAAGP,MAAM,CAACQ,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAb;AACA,SAAOD,IAAI,CAACE,KAAL,CAAWnB,OAAO,CAACoB,iBAAnB,CAAP;AACD;;AACDtB,OAAO,CAACS,KAAR,GAAgBA,KAAhB;;AACAA,KAAK,CAACc,MAAN,GAAe,MAAM;AACnB,SAAO,kBAAP;AACD,CAFD","sourcesContent":["'use strict';\n// m [pubKeys ...] n OP_CHECKMULTISIG\nObject.defineProperty(exports, '__esModule', { value: true });\nconst bscript = require('../../script');\nconst script_1 = require('../../script');\nconst types = require('../../types');\nconst OP_INT_BASE = script_1.OPS.OP_RESERVED; // OP_1 - 1\nfunction check(script, allowIncomplete) {\n  const chunks = bscript.decompile(script);\n  if (chunks.length < 4) return false;\n  if (chunks[chunks.length - 1] !== script_1.OPS.OP_CHECKMULTISIG) return false;\n  if (!types.Number(chunks[0])) return false;\n  if (!types.Number(chunks[chunks.length - 2])) return false;\n  const m = chunks[0] - OP_INT_BASE;\n  const n = chunks[chunks.length - 2] - OP_INT_BASE;\n  if (m <= 0) return false;\n  if (n > 16) return false;\n  if (m > n) return false;\n  if (n !== chunks.length - 3) return false;\n  if (allowIncomplete) return true;\n  const keys = chunks.slice(1, -2);\n  return keys.every(bscript.isCanonicalPubKey);\n}\nexports.check = check;\ncheck.toJSON = () => {\n  return 'multi-sig output';\n};\n"]},"metadata":{},"sourceType":"script"}