{"ast":null,"code":"import { Buckets, PushPathResult, KeyInfo, PrivateKey, WithKeyInfoOptions } from '@textile/hub';\nimport { async } from \"q\";\nexport async function getBucketKey(userIdentity) {\n  if (!userIdentity) {\n    throw new Error('UserIdentity not set');\n  }\n\n  const buckets = await Buckets.withKeyInfo({\n    key: 'bbf34lt5akjatszwybsu5nfhdru'\n  }, {\n    debug: false\n  }); // Authorize the user and your insecure keys with getToken\n\n  await buckets.getToken(userIdentity);\n  const buck = await buckets.getOrCreate('private.storage.zone');\n\n  if (!buck.root) {\n    throw new Error('Failed to open bucket');\n  }\n\n  return {\n    buckets: buckets,\n    bucketKey: buck.root.key\n  };\n}\nexport async function bucketLinks(buckets, bucketkey) {\n  const links = await buckets.links(bucketkey);\n  return links;\n}","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/src/common/bucket.js"],"names":["Buckets","PushPathResult","KeyInfo","PrivateKey","WithKeyInfoOptions","async","getBucketKey","userIdentity","Error","buckets","withKeyInfo","key","debug","getToken","buck","getOrCreate","root","bucketKey","bucketLinks","bucketkey","links"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,cAAlB,EAAkCC,OAAlC,EAA2CC,UAA3C,EAAuDC,kBAAvD,QAAiF,cAAjF;AACA,SAAQC,KAAR,QAAoB,GAApB;AAEA,OAAO,eAAeC,YAAf,CAA4BC,YAA5B,EAA0C;AAC7C,MAAI,CAACA,YAAL,EAAmB;AACf,UAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACH;;AACD,QAAMC,OAAO,GAAG,MAAMT,OAAO,CAACU,WAAR,CAAoB;AACtCC,IAAAA,GAAG,EAAE;AADiC,GAApB,EAEnB;AACCC,IAAAA,KAAK,EAAE;AADR,GAFmB,CAAtB,CAJ6C,CAU7C;;AACA,QAAMH,OAAO,CAACI,QAAR,CAAiBN,YAAjB,CAAN;AAEA,QAAMO,IAAI,GAAG,MAAML,OAAO,CAACM,WAAR,CAAoB,sBAApB,CAAnB;;AACA,MAAI,CAACD,IAAI,CAACE,IAAV,EAAgB;AACZ,UAAM,IAAIR,KAAJ,CAAU,uBAAV,CAAN;AACH;;AACD,SAAO;AAACC,IAAAA,OAAO,EAAEA,OAAV;AAAmBQ,IAAAA,SAAS,EAAEH,IAAI,CAACE,IAAL,CAAUL;AAAxC,GAAP;AACH;AAED,OAAO,eAAeO,WAAf,CAA2BT,OAA3B,EAA2CU,SAA3C,EAAsD;AACzD,QAAMC,KAAK,GAAG,MAAMX,OAAO,CAACW,KAAR,CAAcD,SAAd,CAApB;AACA,SAAOC,KAAP;AACH","sourcesContent":["import { Buckets, PushPathResult, KeyInfo, PrivateKey, WithKeyInfoOptions } from '@textile/hub'\nimport {async} from \"q\";\n\nexport async function getBucketKey(userIdentity) {\n    if (!userIdentity) {\n        throw new Error('UserIdentity not set')\n    }\n    const buckets = await Buckets.withKeyInfo({\n        key: 'bbf34lt5akjatszwybsu5nfhdru'\n    } ,{\n        debug: false\n    });\n\n    // Authorize the user and your insecure keys with getToken\n    await buckets.getToken(userIdentity);\n\n    const buck = await buckets.getOrCreate('private.storage.zone')\n    if (!buck.root) {\n        throw new Error('Failed to open bucket')\n    }\n    return {buckets: buckets, bucketKey: buck.root.key};\n}\n\nexport async function bucketLinks(buckets:Buckets,bucketkey) {\n    const links = await buckets.links(bucketkey);\n    return links;\n}"]},"metadata":{},"sourceType":"module"}