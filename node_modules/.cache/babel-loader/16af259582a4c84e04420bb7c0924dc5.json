{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst combiner_1 = require('./combiner');\n\nconst parser_1 = require('./parser');\n\nconst typeFields_1 = require('./typeFields');\n\nconst utils_1 = require('./utils');\n\nclass Psbt {\n  constructor(tx) {\n    this.inputs = [];\n    this.outputs = [];\n    this.globalMap = {\n      unsignedTx: tx\n    };\n  }\n\n  static fromBase64(data, txFromBuffer) {\n    const buffer = Buffer.from(data, 'base64');\n    return this.fromBuffer(buffer, txFromBuffer);\n  }\n\n  static fromHex(data, txFromBuffer) {\n    const buffer = Buffer.from(data, 'hex');\n    return this.fromBuffer(buffer, txFromBuffer);\n  }\n\n  static fromBuffer(buffer, txFromBuffer) {\n    const results = parser_1.psbtFromBuffer(buffer, txFromBuffer);\n    const psbt = new this(results.globalMap.unsignedTx);\n    Object.assign(psbt, results);\n    return psbt;\n  }\n\n  toBase64() {\n    const buffer = this.toBuffer();\n    return buffer.toString('base64');\n  }\n\n  toHex() {\n    const buffer = this.toBuffer();\n    return buffer.toString('hex');\n  }\n\n  toBuffer() {\n    return parser_1.psbtToBuffer(this);\n  }\n\n  updateGlobal(updateData) {\n    utils_1.updateGlobal(updateData, this.globalMap);\n    return this;\n  }\n\n  updateInput(inputIndex, updateData) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.updateInput(updateData, input);\n    return this;\n  }\n\n  updateOutput(outputIndex, updateData) {\n    const output = utils_1.checkForOutput(this.outputs, outputIndex);\n    utils_1.updateOutput(updateData, output);\n    return this;\n  }\n\n  addUnknownKeyValToGlobal(keyVal) {\n    utils_1.checkHasKey(keyVal, this.globalMap.unknownKeyVals, utils_1.getEnumLength(typeFields_1.GlobalTypes));\n    if (!this.globalMap.unknownKeyVals) this.globalMap.unknownKeyVals = [];\n    this.globalMap.unknownKeyVals.push(keyVal);\n    return this;\n  }\n\n  addUnknownKeyValToInput(inputIndex, keyVal) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.checkHasKey(keyVal, input.unknownKeyVals, utils_1.getEnumLength(typeFields_1.InputTypes));\n    if (!input.unknownKeyVals) input.unknownKeyVals = [];\n    input.unknownKeyVals.push(keyVal);\n    return this;\n  }\n\n  addUnknownKeyValToOutput(outputIndex, keyVal) {\n    const output = utils_1.checkForOutput(this.outputs, outputIndex);\n    utils_1.checkHasKey(keyVal, output.unknownKeyVals, utils_1.getEnumLength(typeFields_1.OutputTypes));\n    if (!output.unknownKeyVals) output.unknownKeyVals = [];\n    output.unknownKeyVals.push(keyVal);\n    return this;\n  }\n\n  addInput(inputData) {\n    this.globalMap.unsignedTx.addInput(inputData);\n    this.inputs.push({\n      unknownKeyVals: []\n    });\n    const addKeyVals = inputData.unknownKeyVals || [];\n    const inputIndex = this.inputs.length - 1;\n\n    if (!Array.isArray(addKeyVals)) {\n      throw new Error('unknownKeyVals must be an Array');\n    }\n\n    addKeyVals.forEach(keyVal => this.addUnknownKeyValToInput(inputIndex, keyVal));\n    utils_1.addInputAttributes(this.inputs, inputData);\n    return this;\n  }\n\n  addOutput(outputData) {\n    this.globalMap.unsignedTx.addOutput(outputData);\n    this.outputs.push({\n      unknownKeyVals: []\n    });\n    const addKeyVals = outputData.unknownKeyVals || [];\n    const outputIndex = this.outputs.length - 1;\n\n    if (!Array.isArray(addKeyVals)) {\n      throw new Error('unknownKeyVals must be an Array');\n    }\n\n    addKeyVals.forEach(keyVal => this.addUnknownKeyValToInput(outputIndex, keyVal));\n    utils_1.addOutputAttributes(this.outputs, outputData);\n    return this;\n  }\n\n  clearFinalizedInput(inputIndex) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.inputCheckUncleanFinalized(inputIndex, input);\n\n    for (const key of Object.keys(input)) {\n      if (!['witnessUtxo', 'nonWitnessUtxo', 'finalScriptSig', 'finalScriptWitness', 'unknownKeyVals'].includes(key)) {\n        // @ts-ignore\n        delete input[key];\n      }\n    }\n\n    return this;\n  }\n\n  combine(...those) {\n    // Combine this with those.\n    // Return self for chaining.\n    const result = combiner_1.combine([this].concat(those));\n    Object.assign(this, result);\n    return this;\n  }\n\n  getTransaction() {\n    return this.globalMap.unsignedTx.toBuffer();\n  }\n\n}\n\nexports.Psbt = Psbt;","map":{"version":3,"sources":["/Users/wiki/code/filecoin/private.storage/node_modules/bip174/src/lib/psbt.js"],"names":["Object","defineProperty","exports","value","combiner_1","require","parser_1","typeFields_1","utils_1","Psbt","constructor","tx","inputs","outputs","globalMap","unsignedTx","fromBase64","data","txFromBuffer","buffer","Buffer","from","fromBuffer","fromHex","results","psbtFromBuffer","psbt","assign","toBase64","toBuffer","toString","toHex","psbtToBuffer","updateGlobal","updateData","updateInput","inputIndex","input","checkForInput","updateOutput","outputIndex","output","checkForOutput","addUnknownKeyValToGlobal","keyVal","checkHasKey","unknownKeyVals","getEnumLength","GlobalTypes","push","addUnknownKeyValToInput","InputTypes","addUnknownKeyValToOutput","OutputTypes","addInput","inputData","addKeyVals","length","Array","isArray","Error","forEach","addInputAttributes","addOutput","outputData","addOutputAttributes","clearFinalizedInput","inputCheckUncleanFinalized","key","keys","includes","combine","those","result","concat","getTransaction"],"mappings":"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","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst combiner_1 = require('./combiner');\nconst parser_1 = require('./parser');\nconst typeFields_1 = require('./typeFields');\nconst utils_1 = require('./utils');\nclass Psbt {\n  constructor(tx) {\n    this.inputs = [];\n    this.outputs = [];\n    this.globalMap = {\n      unsignedTx: tx,\n    };\n  }\n  static fromBase64(data, txFromBuffer) {\n    const buffer = Buffer.from(data, 'base64');\n    return this.fromBuffer(buffer, txFromBuffer);\n  }\n  static fromHex(data, txFromBuffer) {\n    const buffer = Buffer.from(data, 'hex');\n    return this.fromBuffer(buffer, txFromBuffer);\n  }\n  static fromBuffer(buffer, txFromBuffer) {\n    const results = parser_1.psbtFromBuffer(buffer, txFromBuffer);\n    const psbt = new this(results.globalMap.unsignedTx);\n    Object.assign(psbt, results);\n    return psbt;\n  }\n  toBase64() {\n    const buffer = this.toBuffer();\n    return buffer.toString('base64');\n  }\n  toHex() {\n    const buffer = this.toBuffer();\n    return buffer.toString('hex');\n  }\n  toBuffer() {\n    return parser_1.psbtToBuffer(this);\n  }\n  updateGlobal(updateData) {\n    utils_1.updateGlobal(updateData, this.globalMap);\n    return this;\n  }\n  updateInput(inputIndex, updateData) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.updateInput(updateData, input);\n    return this;\n  }\n  updateOutput(outputIndex, updateData) {\n    const output = utils_1.checkForOutput(this.outputs, outputIndex);\n    utils_1.updateOutput(updateData, output);\n    return this;\n  }\n  addUnknownKeyValToGlobal(keyVal) {\n    utils_1.checkHasKey(\n      keyVal,\n      this.globalMap.unknownKeyVals,\n      utils_1.getEnumLength(typeFields_1.GlobalTypes),\n    );\n    if (!this.globalMap.unknownKeyVals) this.globalMap.unknownKeyVals = [];\n    this.globalMap.unknownKeyVals.push(keyVal);\n    return this;\n  }\n  addUnknownKeyValToInput(inputIndex, keyVal) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.checkHasKey(\n      keyVal,\n      input.unknownKeyVals,\n      utils_1.getEnumLength(typeFields_1.InputTypes),\n    );\n    if (!input.unknownKeyVals) input.unknownKeyVals = [];\n    input.unknownKeyVals.push(keyVal);\n    return this;\n  }\n  addUnknownKeyValToOutput(outputIndex, keyVal) {\n    const output = utils_1.checkForOutput(this.outputs, outputIndex);\n    utils_1.checkHasKey(\n      keyVal,\n      output.unknownKeyVals,\n      utils_1.getEnumLength(typeFields_1.OutputTypes),\n    );\n    if (!output.unknownKeyVals) output.unknownKeyVals = [];\n    output.unknownKeyVals.push(keyVal);\n    return this;\n  }\n  addInput(inputData) {\n    this.globalMap.unsignedTx.addInput(inputData);\n    this.inputs.push({\n      unknownKeyVals: [],\n    });\n    const addKeyVals = inputData.unknownKeyVals || [];\n    const inputIndex = this.inputs.length - 1;\n    if (!Array.isArray(addKeyVals)) {\n      throw new Error('unknownKeyVals must be an Array');\n    }\n    addKeyVals.forEach(keyVal =>\n      this.addUnknownKeyValToInput(inputIndex, keyVal),\n    );\n    utils_1.addInputAttributes(this.inputs, inputData);\n    return this;\n  }\n  addOutput(outputData) {\n    this.globalMap.unsignedTx.addOutput(outputData);\n    this.outputs.push({\n      unknownKeyVals: [],\n    });\n    const addKeyVals = outputData.unknownKeyVals || [];\n    const outputIndex = this.outputs.length - 1;\n    if (!Array.isArray(addKeyVals)) {\n      throw new Error('unknownKeyVals must be an Array');\n    }\n    addKeyVals.forEach(keyVal =>\n      this.addUnknownKeyValToInput(outputIndex, keyVal),\n    );\n    utils_1.addOutputAttributes(this.outputs, outputData);\n    return this;\n  }\n  clearFinalizedInput(inputIndex) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.inputCheckUncleanFinalized(inputIndex, input);\n    for (const key of Object.keys(input)) {\n      if (\n        ![\n          'witnessUtxo',\n          'nonWitnessUtxo',\n          'finalScriptSig',\n          'finalScriptWitness',\n          'unknownKeyVals',\n        ].includes(key)\n      ) {\n        // @ts-ignore\n        delete input[key];\n      }\n    }\n    return this;\n  }\n  combine(...those) {\n    // Combine this with those.\n    // Return self for chaining.\n    const result = combiner_1.combine([this].concat(those));\n    Object.assign(this, result);\n    return this;\n  }\n  getTransaction() {\n    return this.globalMap.unsignedTx.toBuffer();\n  }\n}\nexports.Psbt = Psbt;\n"]},"metadata":{},"sourceType":"script"}